var documenterSearchIndex = {"docs":
[{"location":"library/internals/responses/#Responses","page":"Responses","title":"Responses","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"This section of the package is responsible for response-generating. These functions ensure the proper structure for each endpoint response.","category":"page"},{"location":"library/internals/responses/#Index","page":"Responses","title":"Index","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"Pages = [\"responses.md\"]","category":"page"},{"location":"library/internals/responses/#Contents","page":"Responses","title":"Contents","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"ModelSelectionGUI.server_info_response(ncores::Int64, nworkers::Int64, model_selection_version::String, julia_version::String, jobs_queue_size::Int64)\r\nModelSelectionGUI.upload_response(filename::String, filehash::String, datanames::Array{String,1}, nobs::Int64)\r\nModelSelectionGUI.job_info_response(job::ModelSelectionJob)\r\nModelSelectionGUI.job_results_response(job::ModelSelectionJob, resulttype::String)","category":"page"},{"location":"library/internals/responses/#ModelSelectionGUI.server_info_response-Tuple{Int64, Int64, String, String, Int64}","page":"Responses","title":"ModelSelectionGUI.server_info_response","text":"server_info_response(ncores::Int64, nworkers::Int64, model_selection_version::String, julia_version::String, jobs_queue_size::Int64)\n\nCreates a JSON object with server information.\n\nArguments\n\nncores::Int64: The number of cores on the server.\nnworkers::Int64: The number of worker threads on the server.\nmodel_selection_version::String: The version number of the ModelSelection package.\njulia_version::String: The version number of Julia being used.\njobs_queue_size::Int64: The size of the job queue.\n\nReturns\n\nA JSON object containing the server information.\n\nExample\n\nserver_info_response(4, 8, \"1.0.0\", \"1.6.1\", 10)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.upload_response-Tuple{String, String, Vector{String}, Int64}","page":"Responses","title":"ModelSelectionGUI.upload_response","text":"upload_response(filename::String, filehash::String, datanames::Array{String,1}, nobs::Int64)\n\nCreates a JSON object to provide a response for a file upload operation.\n\nArguments\n\nfilename::String: The name of the uploaded file.\nfilehash::String: The hash value of the uploaded file.\ndatanames::Array{String,1}: An array of data names from the uploaded file.\nnobs::Int64: The number of observations in the uploaded file.\n\nReturns\n\nA JSON object with details about the uploaded file.\n\nExample\n\nupload_response(\"data.csv\", \"abc123\", [\"col1\", \"col2\"], 100)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.job_info_response-Tuple{ModelSelectionJob}","page":"Responses","title":"ModelSelectionGUI.job_info_response","text":"job_info_response(job::ModelSelectionJob)\n\nCreates a JSON object that provides information about a ModelSelectionJob.\n\nArguments\n\njob::ModelSelectionJob: The ModelSelectionJob instance to extract information from.\n\nReturns\n\nA JSON object with the details of the ModelSelectionJob.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\njob_info_response(job)\n\n\n\n\n\n","category":"method"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"CONTRIBUTING.md\"))","category":"page"},{"location":"start/#Getting-started","page":"Getting Started","title":"Getting started","text":"","category":"section"},{"location":"start/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"Documenter can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"pkg> add Documenter","category":"page"},{"location":"start/#Usage","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"To start the web server and access the GUI, follow these steps:","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"using ModelSelectionGUI\nstart()","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"note: Note\nIf the web client is enabled open your web browser and enter the following URL: http://127.0.0.1:8000. Please change the host and port for the one that is in your configuration.","category":"page"},{"location":"api/rest/swagger/#Swagger-Documentation","page":"Swagger","title":"Swagger Documentation","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"The package provides a comprehensive API documentation powered by Swagger. You can access the API documentation by visiting the /docs URL of your deployed application. This documentation offers a detailed overview of all available endpoints, request/response examples, and parameter details.","category":"page"},{"location":"api/rest/swagger/#Accessing-the-Swagger-Documentation","page":"Swagger","title":"Accessing the Swagger Documentation","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"To access the Swagger documentation for the ModelSelectionGUI package, follow these steps:","category":"page"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"Start the server and ensure it is running.\nOpen a web browser.\nIn the address bar, enter the URL of your deployed application followed by /docs. For example: http://127.0.0.1/docs.\nThe Swagger documentation page will load, displaying all the available endpoints, their descriptions, and other relevant information.","category":"page"},{"location":"api/rest/swagger/#Using-Swagger-for-Testing-and-Exploration","page":"Swagger","title":"Using Swagger for Testing and Exploration","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"The Swagger documentation not only serves as a reference for the endpoints but also provides an interactive environment for testing and exploring the API. With Swagger UI, you can easily send requests to different endpoints, view their responses, and experiment with various parameters.","category":"page"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"Feel free to leverage the Swagger documentation to understand the functionality of the ModelSelectionGUI package, explore different endpoints, and test API requests right from your browser.","category":"page"},{"location":"library/internals/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"This section of the documentation is dedicated to explaining the custom data structures that are defined and used within our package.","category":"page"},{"location":"library/internals/types/#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"library/internals/types/#Contents","page":"Types","title":"Contents","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"Modules = [ModelSelectionGUI]\r\nOrder   = [:type]","category":"page"},{"location":"library/internals/types/#ModelSelectionGUI.ModelSelectionJob","page":"Types","title":"ModelSelectionGUI.ModelSelectionJob","text":"ModelSelectionJob\n\nA mutable struct that represents a job for performing model selection.\n\nFields\n\nid::String: The unique identifier (UUID) of the model selection job.\nfilename::String: The name of the file used for model selection.\ntempfile::String: The name of a temporary file used during the job's processing.\nhash::String: The unique identifier (UUID) of the file used for model selection.\nparameters::Dict{Symbol,Any}: The parameters used for model selection, including any additional parameters specified in the request.\nstatus::Symbol: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\ntime_enqueued::DateTime: The timestamp when the model selection job was enqueued.\ntime_started::Union{DateTime, Nothing}: The timestamp when the model selection job started, if applicable.\ntime_finished::Union{DateTime, Nothing}: The timestamp when the model selection job finished, if applicable.\nmodelselection_data::Union{ModelSelectionData, Nothing}: The data used for model selection. This is Nothing if the data is not available.\nestimator::Symbol: The estimator used for model selection.\nequation::String: The equation or formula used for model selection.\nmsg::Union{String, Nothing}: A message associated with the job. This is typically used for reporting errors or other important information.\n\nExample\n\nresult = ModelSelectionJob(\n    filename = \"data.csv\",\n    tempfile = \"/tmp/12413947-1597-4b1b-a798-efcb2293e808.csv\",\n    filehash = \"12413947-95bc-4573-a804-efcb2293e808\",\n    payload = {\n        :estimator: :ols,\n        :equation: \"y x1 x2 x3\",\n        \"ttest\": true,\n    },\n)\n\n\n\n\n\n","category":"type"},{"location":"library/internals/exceptions/#Exceptions","page":"Exceptions","title":"Exceptions","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"This section of the package is responsible for controlling how and when a browser window is opened.","category":"page"},{"location":"library/internals/exceptions/#Index","page":"Exceptions","title":"Index","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"Pages = [\"exceptions.md\"]","category":"page"},{"location":"library/internals/exceptions/#Contents","page":"Exceptions","title":"Contents","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"ModelSelectionGUI.bad_request_exception(message)","category":"page"},{"location":"library/internals/exceptions/#ModelSelectionGUI.bad_request_exception-Tuple{Any}","page":"Exceptions","title":"ModelSelectionGUI.bad_request_exception","text":"bad_request_exception(message)\n\nCreates an HTTP response with a 400 (Bad Request) status code.\n\nArguments\n\nmessage::String: The message to be sent in the HTTP response.\n\nReturns\n\nAn HTTP response with a status code of 400 and the provided message.\n\nExamples\n\nbad_request_exception(\"Invalid request parameters.\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/browser/#Browser","page":"Browser","title":"Browser","text":"","category":"section"},{"location":"library/internals/browser/","page":"Browser","title":"Browser","text":"The section of the package is responsible for controlling how and when a browser window is opened.","category":"page"},{"location":"library/internals/browser/#Index","page":"Browser","title":"Index","text":"","category":"section"},{"location":"library/internals/browser/","page":"Browser","title":"Browser","text":"Pages = [\"browser.md\"]","category":"page"},{"location":"library/internals/browser/#Contents","page":"Browser","title":"Contents","text":"","category":"section"},{"location":"library/internals/browser/","page":"Browser","title":"Browser","text":"ModelSelectionGUI.browser(; path::Union{String, Nothing} = nothing, port::Int64 = CLIENT_PORT)","category":"page"},{"location":"library/internals/browser/#ModelSelectionGUI.browser-Tuple{}","page":"Browser","title":"ModelSelectionGUI.browser","text":"browser(; path::Union{String, Nothing} = nothing, port::Int64 = CLIENT_PORT)\n\nOpen a new browser window with the specified path and port on the server. The server URL is taken from the SERVER_URL global variable.\n\npath: Optional string specifying the path on the server to open in the browser. If nothing, the root path of the server is opened.\nport: Port number to use. If not provided, the default client port (as defined in CLIENT_PORT) is used.\n\nThis function supports Windows, MacOS, and Linux operating systems.\n\nExamples\n\nbrowser(path = \"/docs\", port = 8080)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#Jobs","page":"Jobs","title":"Jobs","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"The section of the package is responsible for handle the jobs.","category":"page"},{"location":"library/internals/jobs/#Index","page":"Jobs","title":"Index","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"Pages = [\"jobs.md\"]","category":"page"},{"location":"library/internals/jobs/#Contents","page":"Jobs","title":"Contents","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"ModelSelectionGUI.enqueue_job(job::ModelSelectionJob)\r\nModelSelectionGUI.consume_job_queue()\r\nModelSelectionGUI.run_job(job::ModelSelectionJob)\r\nModelSelectionGUI.get_jobs_queue_length()\r\nModelSelectionGUI.add_job_file(filehash::String, tempfile::String, filename::String)\r\nModelSelectionGUI.get_job_file(filehash::String)\r\nModelSelectionGUI.job_notify(message::String, data::Union{Dict{Any,Any},Nothing} = nothing)\r\nModelSelectionGUI.get_job(queue::Vector{ModelSelectionJob}, id::String)\r\nModelSelectionGUI.get_job(id::String)\r\nModelSelectionGUI.get_job_queue(id::String)\r\nModelSelectionGUI.get_current_job(id::Union{String,Nothing} = nothing)\r\nModelSelectionGUI.get_job_finished(id::String)\r\nModelSelectionGUI.clear_jobs_queue()\r\nModelSelectionGUI.clear_current_job()\r\nModelSelectionGUI.clear_jobs_finished()","category":"page"},{"location":"library/internals/jobs/#ModelSelectionGUI.enqueue_job-Tuple{ModelSelectionJob}","page":"Jobs","title":"ModelSelectionGUI.enqueue_job","text":"enqueue_job(job::ModelSelectionJob)\n\nEnqueues the specified ModelSelectionJob and notifies any waiting tasks.\n\nArguments\n\njob::ModelSelectionJob: The ModelSelectionJob instance to enqueue.\n\nReturns\n\nThe enqueued ModelSelectionJob.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\nenqueue_job(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.consume_job_queue-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.consume_job_queue","text":"consume_job_queue()\n\nContinuously consumes jobs from the queue and runs them. This function blocks indefinitely.\n\nExample\n\nconsume_job_queue()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.run_job-Tuple{ModelSelectionJob}","page":"Jobs","title":"ModelSelectionGUI.run_job","text":"run_job(job::ModelSelectionJob)\n\nRuns the specified ModelSelectionJob, reads the necessary data from the job's tempfile,  and performs model selection. In case of any exception, sets the job status to FAILED and  saves the error message.\n\nArguments\n\njob::ModelSelectionJob: The ModelSelectionJob instance to run.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\nrun_job(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_jobs_queue_length-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.get_jobs_queue_length","text":"get_jobs_queue_length()\n\nReturns the number of jobs currently enqueued.\n\nExample\n\nget_jobs_queue_length()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.add_job_file-Tuple{String, String, String}","page":"Jobs","title":"ModelSelectionGUI.add_job_file","text":"add_job_file(filehash::String, tempfile::String, filename::String)\n\nStores a mapping from filehash to the specified tempfile and filename.\n\nArguments\n\nfilehash::String: The file hash.\ntempfile::String: The temporary file path.\nfilename::String: The original file name.\n\nExample\n\nadd_job_file(\"filehash\", \"tempfile\", \"filename\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job_file-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job_file","text":"get_job_file(filehash::String)\n\nReturns the tempfile and filename associated with the specified filehash.\n\nArguments\n\nfilehash::String: The file hash.\n\nReturns\n\nA Dict with the tempfile and filename.\n\nExample\n\nget_job_file(\"filehash\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.job_notify","page":"Jobs","title":"ModelSelectionGUI.job_notify","text":"job_notify(message::String, data::Union{Dict{Any,Any},Nothing} = nothing)\n\nNotifies all subscribers on the default WebSocket channel with the specified message and data.\n\nArguments\n\nmessage::String: The message to send.\ndata::Union{Dict{Any,Any},Nothing}: The data to send.\n\nExample\n\njob_notify(\"message\", Dict(\"data\" => \"data\"))\n\n\n\n\n\n","category":"function"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job-Tuple{Vector{ModelSelectionJob}, String}","page":"Jobs","title":"ModelSelectionGUI.get_job","text":"get_job(queue::Vector{ModelSelectionJob}, id::String)\n\nSearches for a job with the specified id in the provided queue and returns it.  Returns nothing if the job is not found.\n\nArguments\n\nqueue::Vector{ModelSelectionJob}: The queue to search.\nid::String: The job id.\n\nReturns\n\nThe job with the specified id or nothing if the job is not found.\n\nExample\n\nget_job(queue, \"id\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job","text":"get_job(id::String)\n\nReturns the job with the specified id from the queue of jobs, the current job, or the finished jobs.  Returns nothing if the job is not found.\n\nArguments\n\nid::String: The job id.\n\nReturns\n\nThe job with the specified id or nothing if the job is not found.\n\nExample\n\nget_job(\"id\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job_queue-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job_queue","text":"get_job_queue(id::String)\n\nReturns the job with the specified id from the queue of jobs.  Returns nothing if the job is not found.\n\nArguments\n\nid::String: The job id.\n\nReturns\n\nThe job with the specified id or nothing if the job is not found.\n\nExample\n\nget_job_queue(\"id\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_current_job","page":"Jobs","title":"ModelSelectionGUI.get_current_job","text":"get_current_job(id::Union{String,Nothing} = nothing)\n\nReturns the current job. If id is specified, only returns the current job if its id matches id. Returns nothing if there is no current job or if the id does not match.\n\nArguments\n\nid::Union{String,Nothing}: The job id.\n\nReturns\n\nThe current job or nothing if there is no current job or if the id does not match.\n\nExample\n\nget_current_job()\n\n\n\n\n\n","category":"function"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job_finished-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job_finished","text":"get_job_finished(id::String)\n\nReturns the job with the specified id from the finished jobs.  Returns nothing if the job is not found.\n\nArguments\n\nid::String: The job id.\n\nReturns\n\nThe job with the specified id or nothing if the job is not found.\n\nExample\n\nget_job_finished(\"id\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_jobs_queue-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_jobs_queue","text":"clear_jobs_queue()\n\nClear the jobs queue. \n\nExample\n\nclear_jobs_queue()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_current_job-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_current_job","text":"clear_current_job()\n\nClear the current job.\n\nExample\n\nclear_current_job()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_jobs_finished-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_jobs_finished","text":"clear_jobs_finished()\n\nClear all the finished jobs. \n\nExample\n\nclear_jobs_finished()\n\n\n\n\n\n","category":"method"},{"location":"news/#Todo","page":"News","title":"Todo","text":"","category":"section"},{"location":"news/","page":"News","title":"News","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"NEWS.md\"))","category":"page"},{"location":"library/internals/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"This section of the documentation is dedicated to explaining the purpose and usage of the various string constants used throughout our package.","category":"page"},{"location":"library/internals/strings/#Index","page":"Strings","title":"Index","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"Pages = [\"strings.md\"]","category":"page"},{"location":"library/internals/strings/#Contents","page":"Strings","title":"Contents","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"ModelSelectionGUI.MISSING_JOB_ID\r\nModelSelectionGUI.FILE_NOT_SENT\r\nModelSelectionGUI.FILE_NOT_FOUND\r\nModelSelectionGUI.INVALID_CSV\r\nModelSelectionGUI.FILE_NOT_SAVED\r\nModelSelectionGUI.FILEHASH_NOT_VALID\r\nModelSelectionGUI.ESTIMATOR_MISSING\r\nModelSelectionGUI.EQUATION_MISSING\r\nModelSelectionGUI.MISSING_RESULT_TYPE\r\nModelSelectionGUI.INVALID_RESULT_TYPE\r\nModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE","category":"page"},{"location":"library/internals/strings/#ModelSelectionGUI.MISSING_JOB_ID","page":"Strings","title":"ModelSelectionGUI.MISSING_JOB_ID","text":"MISSING_JOB_ID\n\nThis constant is a string template for error messages indicating that a job with a given ID does not exist.  It's typically used in a context where you're trying to find a job by its ID and the ID does not match any existing job.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_SENT","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_SENT","text":"FILE_NOT_SENT\n\nThis constant is used when a required file was not provided or transmitted as expected in a file operation or request.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_FOUND","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_FOUND","text":"FILE_NOT_FOUND\n\nThis constant is used when a file was expected to be found in a certain location or under a certain name, but wasn't.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.INVALID_CSV","page":"Strings","title":"ModelSelectionGUI.INVALID_CSV","text":"INVALID_CSV\n\nThis constant indicates that a file that was expected to be in the CSV format was not valid CSV.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_SAVED","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_SAVED","text":"FILE_NOT_SAVED\n\nThis constant is used when there was a problem or an error when attempting to save a file.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILEHASH_NOT_VALID","page":"Strings","title":"ModelSelectionGUI.FILEHASH_NOT_VALID","text":"FILEHASH_NOT_VALID\n\nThis constant is a string template for error messages indicating that a given file hash is not valid. It's typically used when you're validating the hash of a file.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.ESTIMATOR_MISSING","page":"Strings","title":"ModelSelectionGUI.ESTIMATOR_MISSING","text":"ESTIMATOR_MISSING\n\nThis constant is used when an expected estimator was not provided in the context of a model or analysis.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.EQUATION_MISSING","page":"Strings","title":"ModelSelectionGUI.EQUATION_MISSING","text":"EQUATION_MISSING\n\nThis constant is used when an equation, which is required for a particular calculation or operation, was not provided.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.MISSING_RESULT_TYPE","page":"Strings","title":"ModelSelectionGUI.MISSING_RESULT_TYPE","text":"MISSING_RESULT_TYPE\n\nThis constant is used when a result type, which is required to process or categorize an output, is not provided.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.INVALID_RESULT_TYPE","page":"Strings","title":"ModelSelectionGUI.INVALID_RESULT_TYPE","text":"INVALID_RESULT_TYPE\n\nThis constant is a string template for error messages indicating that a given result type is not valid.  It's typically used in a context where you're trying to request a result by its type and the type does not match any known result types.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE","page":"Strings","title":"ModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE","text":"JOB_HAS_NOT_RESULTTYPE\n\nThis constant is a string template for error messages indicating that a job does not have a result of a specified type. It's typically used when you're trying to request a result by its type from a job and the job does not have a result of that type.\n\n\n\n\n\n","category":"constant"},{"location":"api/rest/#Rest-API-Endpoints","page":"Endpoints","title":"Rest API Endpoints","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"The Rest API endpoints are the core communication to interact with the backend services. ","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Pages = [\"index.md\"]","category":"page"},{"location":"api/rest/#Server-info","page":"Endpoints","title":"Server info","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves information about the server.","category":"page"},{"location":"api/rest/#Request","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /server-info\nMethod: GET","category":"page"},{"location":"api/rest/#Response","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json \nBody:\njulia_version: The version of Julia running on the server.\nmodel_selection_version: The version of the ModelSelection package being used.\nncores: The number of CPU cores available on the server.\nnworkers: The number of workers available for parallel processing.\njobs_queue_size: The number of jobs currently in the queue.","category":"page"},{"location":"api/rest/#Example","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/server-info\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"julia_version\": \"1.6.7\",\r\n    \"model_selection_version\": \"1.2.0\",\r\n    \"ncores\": 8,\r\n    \"nworkers\": 4,\r\n    \"jobs_queue_size\": 0\r\n}","category":"page"},{"location":"api/rest/#File-upload","page":"Endpoints","title":"File upload","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Uploads a CSV file to the server. Upon successful upload, the server will process the uploaded file for further operations.","category":"page"},{"location":"api/rest/#Request-2","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /upload-file\nMethod: POST\nContent-Type: form-data\nBody: \ndata: The CSV file to upload.","category":"page"},{"location":"api/rest/#Response-2","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nfilename: The name of the uploaded file.\nfilehash: The unique identifier (UUID) for the uploaded file.\ndatanames: The names of the columns in the CSV file.\nnobs: The number of observations (rows) in the CSV file.","category":"page"},{"location":"api/rest/#Example-2","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/upload-file\" --form \"data=@data.csv;type=text/csv\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"filename\": \"data.csv\",\r\n    \"filehash\": \"6c48451b-af17-43cb-a251-e847abc94472\",\r\n    \"datanames\": [\"y\", \"x1\", \"x2\", \"x3\", \"x4\", \"x5\"],\r\n    \"nobs\": 100\r\n}","category":"page"},{"location":"api/rest/#Enqueue-a-job","page":"Endpoints","title":"Enqueue a job","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Enqueues a model selection job for the specified file. The task will be executed after the previously queued tasks have finished.","category":"page"},{"location":"api/rest/#Request-3","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /job-enqueue/:filehash\nMethod: POST\nQuery parameter:\nfilehash: The unique identifier (UUID) of the uploaded file to perform model selection on.\nContent-Type: application/json\nBody:\nestimator: The estimator to use for model selection (e.g., \"ols\").\nequation: The equation or formula specifying the dependent and independent variables.\nttest: Flag indicating whether to perform t-tests. Default is true.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nPlease refer to the ModelSelection.jl package documentation for additional parameters that can be included in the request.","category":"page"},{"location":"api/rest/#Response-3","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nid: The unique identifier (UUID) of the model selection job.\nfilehash: The unique identifier (UUID) of the file used for model selection.\nfilename: The name of the file used for model selection.\nstatus: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\nmsg: A message associated with the status, if any.\ntime_enqueued: The timestamp when the model selection job was enqueued.\ntime_started: The timestamp when the model selection job started, if applicable.\ntime_finished: The timestamp when the model selection job finished, if applicable.\nestimator: The estimator used for model selection.\nequation: The equation or formula used for model selection.\nparameters: The parameters used for model selection, including any additional parameters specified in the request.","category":"page"},{"location":"api/rest/#Example-3","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/job-enqueue/64486929-0f7b-459a-a1d2-292258eb6580\" \\\r\n--header \"Content-Type: application/json\" \\\r\n--data \"{\r\n    \\\"estimator\\\": \\\"ols\\\",\r\n    \\\"equation\\\": \\\"y x1 x2 x3\\\",\r\n    \\\"fixedvariables\\\": [\\\"x4\\\"],\r\n    \\\"modelavg\\\": true,\r\n    \\\"ttest\\\": true,\r\n    \\\"kfoldcrossvalidation\\\": true,\r\n    \\\"numfolds\\\": 5\r\n}\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"filehash\": \"12413947-95bc-4573-a804-efcb2293e808\",\r\n    \"filename\": \"data.csv\",\r\n    \"status\": \"pending\",\r\n    \"msg\": null,\r\n    \"time_enqueued\": \"2023-06-07T16:38:11.18\",\r\n    \"time_started\": null,\r\n    \"time_finished\": null,\r\n    \"estimator\": \"ols\",\r\n    \"equation\": \"y x1 x2 x3\",\r\n    \"parameters\": {\r\n        \"ttest\": true\r\n    }\r\n}","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response contains detailed information about the initiated model selection process, including the current status and the parameters used.","category":"page"},{"location":"api/rest/#Get-job-info","page":"Endpoints","title":"Get job info","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves the info of a model selection job. If the job is finished, it also includes the summary of a model selection job.","category":"page"},{"location":"api/rest/#Request-4","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: job/:id\nMethod: GET\nQuery parameter:\nid: The unique identifier (UUID) of the model selection job.","category":"page"},{"location":"api/rest/#Response-4","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nid: The unique identifier (UUID) of the model selection job.\nfilehash: The unique identifier (UUID) of the file used for model selection.\nfilename: The name of the file used for model selection.\nstatus: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\nmsg: A message associated with the status, if any.\ntime_enqueued: The timestamp when the model selection job was enqueued.\ntime_started: The timestamp when the model selection job started, if applicable.\ntime_finished: The timestamp when the model selection job finished, if applicable.\nestimator: The estimator used for model selection.\nequation: The equation or formula used for model selection.\nparameters: The parameters used for model selection, including any additional parameters specified in the request.\nresults: The results of the model selection job, including different types of analysis, if finished.","category":"page"},{"location":"api/rest/#Example-4","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/job/99e36de3-4c47-4285-873d-7f92ed0c42ea\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"filehash\": \"12413947-95bc-4573-a804-efcb2293e808\",\r\n    \"filename\": \"data.csv\",\r\n    \"status\": \"pending\",\r\n    \"msg\": null,\r\n    \"time_enqueued\": \"2023-06-07T16:38:11.18\",\r\n    \"time_started\": null,\r\n    \"time_finished\": null,\r\n    \"estimator\": \"ols\",\r\n    \"equation\": \"y x1 x2 x3\",\r\n    \"parameters\": {\r\n        \"ttest\": true,\r\n    },\r\n    \"results\": {\r\n        \"crossvalidation\": {\r\n            \"average\": {},\r\n            \"median\": {}\r\n        },\r\n        \"allsubsetregression\": {\r\n            \"modelavg\": {}\r\n        },\r\n    }\r\n}","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response contains detailed information about the initiated model selection job, including the current status and the parameters used.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nIf the job is finished, it also includes the summary of a model selection job.","category":"page"},{"location":"api/rest/#Get-job-results","page":"Endpoints","title":"Get job results","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves the result file of a specific type for a model selection job.","category":"page"},{"location":"api/rest/#Request-5","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /job/:id/results/:type\nMethod: GET\nQuery parameters:\nid: The unique identifier (UUID) of the model selection job.\ntype: The type of result file to retrieve. Possible values: summary, allsubsetregression, crossvalidation.","category":"page"},{"location":"api/rest/#Response-5","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type:\nsummary: text/plain\nallsubsetregression: text/csv\ncrossvalidation: text/csv\nBody: The response returns the result file in the corresponding format based on the type specified.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response should include appropriate headers to indicate the file type and provide options for file download or display.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe filename is a concatenation of the original data filename and the type. Example: If the type is summary and the response is a plain text file, the following headers can be set:Content-Type: text/plain\r\nContent-Disposition: inline; filename=summary.txtExample: If the type is allsubsetregression or crossvalidation and the response is a CSV file, the following headers can be set:Content-Type: text/csv\r\nContent-Disposition: attachment; filename=result.csv","category":"page"},{"location":"api/websockets/#Websockets","page":"Websockets","title":"Websockets","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"It is possible to have a continuous status on the execution of a job using web sockets.","category":"page"},{"location":"api/websockets/#How-to-stablish-a-connection","page":"Websockets","title":"How to stablish a connection","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"URL: ws://127.0.0.1:8080\nChannel: sync","category":"page"},{"location":"api/websockets/#Example","page":"Websockets","title":"Example","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"// JavaScript\r\nconst ws = new WebSocket(\"ws://127.0.0.1:8000\");\r\nconst msg = {\r\n    channel: \"sync\",\r\n    message: \"subscribe\",\r\n    payload: {},\r\n};\r\nws.send(JSON.stringify(msg));","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"note: Note\nPlease change the host and port for the one that is in your configuration.","category":"page"},{"location":"api/websockets/#Receive-information","page":"Websockets","title":"Receive information","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"The server will be sending information about the current job in a JSON message that contains the following structure:     - id: The unique identifier (UUID) of the model selection job.     - message: The content or description of the message.     - data: Additional data associated with the message.","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"Example JSON message:","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"message\": \"Running regressions\",\r\n    \"data\": {\r\n        \"progress\": 20,\r\n        \"total\": 100\r\n    }\r\n}","category":"page"},{"location":"api/websockets/#Example-2","page":"Websockets","title":"Example","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"// JavaScript\r\nws.onmessage = (event) => {\r\n  console.log(event.data);\r\n}","category":"page"},{"location":"library/internals/views/#Views","page":"Views","title":"Views","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"This section of the documentation is dedicated to explaining the API views to handle HTTP requests and responses. ","category":"page"},{"location":"library/internals/views/#Index","page":"Views","title":"Index","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"Pages = [\"views.md\"]","category":"page"},{"location":"library/internals/views/#Contents","page":"Views","title":"Contents","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"ModelSelectionGUI.home_view()\r\nModelSelectionGUI.server_info_view()\r\nModelSelectionGUI.upload_file_view()\r\nModelSelectionGUI.job_enqueue_view()\r\nModelSelectionGUI.job_info_view()\r\nModelSelectionGUI.job_results_view()\r\nModelSelectionGUI.websocket_channel_view()","category":"page"},{"location":"library/internals/views/#ModelSelectionGUI.home_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.home_view","text":"home_view()\n\nThe function handles the home page view. Returns a simple HTML string \"ModelSelectionGUI\".\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.server_info_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.server_info_view","text":"server_info_view()\n\nReturns information about the server.\n\nReturns\n\nA JSON object with the server information.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.upload_file_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.upload_file_view","text":"upload_file_view()\n\nUploads a CSV file to the server. Upon successful upload, the server will process the uploaded file for further operations.\n\nReturns\n\nA JSON object with information about the saved file.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_enqueue_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_enqueue_view","text":"job_enqueue_view()\n\nEnqueues a model selection job for the specified file. The task will be executed after the previously queued tasks have finished.\n\nReturns\n\nA JSON object with information about the created job.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_info_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_info_view","text":"job_info_view()\n\nReturns the info of a model selection job. If the job is finished, it also includes the summary of a model selection job.\n\nReturns\n\nA JSON object with information about the selected job.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_results_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_results_view","text":"jobresultsview()\n\nReturns the result file of a specific type for a model selection job.\n\nReturns\n\nA text file with the selected result.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.websocket_channel_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.websocket_channel_view","text":"websocket_channel_view()\n\nThe function handles the view for WebSocket channel subscriptions.  It subscribes the client to the default WebSocket channel and returns a confirmation string.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"This section of the documentation provides detailed information about the constants used throughout our application.","category":"page"},{"location":"library/internals/constants/#Index","page":"Constants","title":"Index","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"Pages = [\"constants.md\"]","category":"page"},{"location":"library/internals/constants/#Contents","page":"Constants","title":"Contents","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"ModelSelectionGUI.MODEL_SELECTION_NAME\r\nModelSelectionGUI.MODEL_SELECTION_VER\r\nModelSelectionGUI.ENV_FILE_DEFAULT\r\nModelSelectionGUI.SERVER_PORT_DEFAULT\r\nModelSelectionGUI.OPEN_BROWSER_DEFAULT\r\nModelSelectionGUI.OPEN_CLIENT_DEFAULT\r\nModelSelectionGUI.SERVER_URL_DEFAULT\r\nModelSelectionGUI.DATA\r\nModelSelectionGUI.FILEHASH\r\nModelSelectionGUI.FILENAME\r\nModelSelectionGUI.ID\r\nModelSelectionGUI.MESSAGE\r\nModelSelectionGUI.PARAMETERS\r\nModelSelectionGUI.TEMP_FILENAME\r\nModelSelectionGUI.NCORES\r\nModelSelectionGUI.NWORKERS\r\nModelSelectionGUI.MODEL_SELECTION_VERSION\r\nModelSelectionGUI.JULIA_VERSION\r\nModelSelectionGUI.JOBS_QUEUE_SIZE\r\nModelSelectionGUI.STATUS\r\nModelSelectionGUI.JOB_ID\r\nModelSelectionGUI.ENQUEUED\r\nModelSelectionGUI.RUNNING\r\nModelSelectionGUI.FINISHED\r\nModelSelectionGUI.FAILED\r\nModelSelectionGUI.PENDING\r\nModelSelectionGUI.ESTIMATOR\r\nModelSelectionGUI.EQUATION\r\nModelSelectionGUI.DATANAMES\r\nModelSelectionGUI.NOBS\r\nModelSelectionGUI.TIME_ENQUEUED\r\nModelSelectionGUI.TIME_STARTED\r\nModelSelectionGUI.TIME_FINISHED\r\nModelSelectionGUI.MSG\r\nModelSelectionGUI.ALLSUBSETREGRESSION\r\nModelSelectionGUI.CROSSVALIDATION\r\nModelSelectionGUI.SUMMARY\r\nModelSelectionGUI.AVAILABLE_RESULTS_TYPES\r\nModelSelectionGUI.DEFAULT_WS_CHANNEL\r\nModelSelectionGUI.RESULTS\r\nModelSelectionGUI.CSV_MIME\r\nModelSelectionGUI.PLAIN_MIME","category":"page"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_NAME","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_NAME","text":"MODEL_SELECTION_NAME\n\nName of the Model Selection package.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_VER","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_VER","text":"MODEL_SELECTION_VER\n\nVersion of the Model Selection package. Determined by calling get_pkg_version(MODEL_SELECTION_NAME).\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ENV_FILE_DEFAULT","page":"Constants","title":"ModelSelectionGUI.ENV_FILE_DEFAULT","text":"ENV_FILE_DEFAULT\n\nDefault path for the .env file used for storing environment variables. The default path is \".env\".\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SERVER_PORT_DEFAULT","page":"Constants","title":"ModelSelectionGUI.SERVER_PORT_DEFAULT","text":"SERVER_PORT_DEFAULT\n\nDefault port number for the server. The default port is 8000.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.OPEN_BROWSER_DEFAULT","page":"Constants","title":"ModelSelectionGUI.OPEN_BROWSER_DEFAULT","text":"OPEN_BROWSER_DEFAULT\n\nDefault value for whether to open the browser automatically when the server starts for Swagger documentation.  The default behavior is not to open the browser, i.e., false.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.OPEN_CLIENT_DEFAULT","page":"Constants","title":"ModelSelectionGUI.OPEN_CLIENT_DEFAULT","text":"OPEN_CLIENT_DEFAULT\n\nDefault value for whether to open the client automatically when the server starts.  The default behavior is not to open the client, i.e., false.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SERVER_URL_DEFAULT","page":"Constants","title":"ModelSelectionGUI.SERVER_URL_DEFAULT","text":"SERVER_URL_DEFAULT\n\nDefault base URL for the server. The default URL is \"http://127.0.0.1\".\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DATA","page":"Constants","title":"ModelSelectionGUI.DATA","text":"DATA\n\nSymbol representing data. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FILEHASH","page":"Constants","title":"ModelSelectionGUI.FILEHASH","text":"FILEHASH\n\nSymbol representing filehash. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FILENAME","page":"Constants","title":"ModelSelectionGUI.FILENAME","text":"FILENAME\n\nSymbol representing filename. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ID","page":"Constants","title":"ModelSelectionGUI.ID","text":"ID\n\nSymbol representing ID. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MESSAGE","page":"Constants","title":"ModelSelectionGUI.MESSAGE","text":"MESSAGE\n\nSymbol representing message. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PARAMETERS","page":"Constants","title":"ModelSelectionGUI.PARAMETERS","text":"PARAMETERS\n\nSymbol representing parameters. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TEMP_FILENAME","page":"Constants","title":"ModelSelectionGUI.TEMP_FILENAME","text":"TEMP_FILENAME\n\nSymbol representing temporary filename. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NCORES","page":"Constants","title":"ModelSelectionGUI.NCORES","text":"NCORES\n\nSymbol representing the number of cores. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NWORKERS","page":"Constants","title":"ModelSelectionGUI.NWORKERS","text":"NWORKERS\n\nSymbol representing the number of workers. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_VERSION","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_VERSION","text":"MODEL_SELECTION_VERSION\n\nSymbol representing the version of the Model Selection package. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.JULIA_VERSION","page":"Constants","title":"ModelSelectionGUI.JULIA_VERSION","text":"JULIA_VERSION\n\nSymbol representing the Julia version. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.JOBS_QUEUE_SIZE","page":"Constants","title":"ModelSelectionGUI.JOBS_QUEUE_SIZE","text":"JOBS_QUEUE_SIZE\n\nSymbol representing the size of the jobs queue. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.STATUS","page":"Constants","title":"ModelSelectionGUI.STATUS","text":"STATUS\n\nSymbol representing the status of an operation. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.JOB_ID","page":"Constants","title":"ModelSelectionGUI.JOB_ID","text":"JOB_ID\n\nSymbol representing the ID of a job. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ENQUEUED","page":"Constants","title":"ModelSelectionGUI.ENQUEUED","text":"ENQUEUED\n\nSymbol representing the enqueued status. Used to denote that a job has been added to the queue.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.RUNNING","page":"Constants","title":"ModelSelectionGUI.RUNNING","text":"RUNNING\n\nSymbol representing the running status. Used to denote that a job is currently being executed.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FINISHED","page":"Constants","title":"ModelSelectionGUI.FINISHED","text":"FINISHED\n\nSymbol representing the finished status. Used to denote that a job has completed execution.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FAILED","page":"Constants","title":"ModelSelectionGUI.FAILED","text":"FAILED\n\nSymbol representing the failed status. Used to denote that a job has failed to execute.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PENDING","page":"Constants","title":"ModelSelectionGUI.PENDING","text":"PENDING\n\nSymbol representing the pending status. Used to denote that a job is in the queue, but not yet being executed.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ESTIMATOR","page":"Constants","title":"ModelSelectionGUI.ESTIMATOR","text":"ESTIMATOR\n\nSymbol representing an estimator. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.EQUATION","page":"Constants","title":"ModelSelectionGUI.EQUATION","text":"EQUATION\n\nSymbol representing an equation. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DATANAMES","page":"Constants","title":"ModelSelectionGUI.DATANAMES","text":"DATANAMES\n\nSymbol representing data names. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NOBS","page":"Constants","title":"ModelSelectionGUI.NOBS","text":"NOBS\n\nSymbol representing the number of observations. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_ENQUEUED","page":"Constants","title":"ModelSelectionGUI.TIME_ENQUEUED","text":"TIME_ENQUEUED\n\nSymbol representing the time that a job is enqueued. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_STARTED","page":"Constants","title":"ModelSelectionGUI.TIME_STARTED","text":"TIME_STARTED\n\nSymbol representing the time that a job started. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_FINISHED","page":"Constants","title":"ModelSelectionGUI.TIME_FINISHED","text":"TIME_FINISHED\n\nSymbol representing the time that a job finished. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MSG","page":"Constants","title":"ModelSelectionGUI.MSG","text":"MSG\n\nSymbol representing an API message. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ALLSUBSETREGRESSION","page":"Constants","title":"ModelSelectionGUI.ALLSUBSETREGRESSION","text":"ALLSUBSETREGRESSION\n\nSymbol representing the All Subset Regression result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.CROSSVALIDATION","page":"Constants","title":"ModelSelectionGUI.CROSSVALIDATION","text":"CROSSVALIDATION\n\nSymbol representing the Cross Validation result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SUMMARY","page":"Constants","title":"ModelSelectionGUI.SUMMARY","text":"SUMMARY\n\nSymbol representing the Summary result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.AVAILABLE_RESULTS_TYPES","page":"Constants","title":"ModelSelectionGUI.AVAILABLE_RESULTS_TYPES","text":"AVAILABLE_RESULTS_TYPES\n\nArray containing symbols that represent the different types of results available in the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DEFAULT_WS_CHANNEL","page":"Constants","title":"ModelSelectionGUI.DEFAULT_WS_CHANNEL","text":"DEFAULT_WS_CHANNEL\n\nSymbol representing the default WebSockets channel. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.RESULTS","page":"Constants","title":"ModelSelectionGUI.RESULTS","text":"RESULTS\n\nSymbol representing results. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.CSV_MIME","page":"Constants","title":"ModelSelectionGUI.CSV_MIME","text":"CSV_MIME\n\nString representing the MIME type for CSV files. Used when handling CSV file data within the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PLAIN_MIME","page":"Constants","title":"ModelSelectionGUI.PLAIN_MIME","text":"PLAIN_MIME\n\nString representing the MIME type for CSV files. Used when handling plain txt file data within the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"This section of the documentation is dedicated to explaining the various utility functions used throughout the package. ","category":"page"},{"location":"library/internals/utils/#Index","page":"Utils","title":"Index","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"Pages = [\"utils.md\"]","category":"page"},{"location":"library/internals/utils/#Contents","page":"Utils","title":"Contents","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"ModelSelectionGUI.get_pkg_version(name::AbstractString)\r\nModelSelectionGUI.save_tempfile(name::String, data::DataFrame)\r\nModelSelectionGUI.get_csv_filename(filename::String, result::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult)\r\nModelSelectionGUI.get_csv_filename(filename::String, result::ModelSelection.CrossValidation.CrossValidationResult)\r\nModelSelectionGUI.get_txt_filename(filename::String)\r\nModelSelectionGUI.get_csv_from_result(filename::String, result::ModelSelectionResult)\r\nModelSelectionGUI.get_parameters(raw_payload::Dict{String,Any})\r\nModelSelectionGUI.to_dict(job::ModelSelectionJob)\r\nModelSelectionGUI.get_request_job_id(params::Any)\r\nModelSelectionGUI.get_request_filehash(params::Any)","category":"page"},{"location":"library/internals/utils/#ModelSelectionGUI.get_pkg_version-Tuple{AbstractString}","page":"Utils","title":"ModelSelectionGUI.get_pkg_version","text":"get_pkg_version(name::AbstractString)\n\nGet the installed version of a Julia package by its name.\n\nArguments\n\nname::AbstractString: The name of the Julia package.\n\nReturns\n\nThe version of the specified package.\n\nExample\n\nget_pkg_version(\"ModelSelection\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.save_tempfile-Tuple{String, DataFrame}","page":"Utils","title":"ModelSelectionGUI.save_tempfile","text":"save_tempfile(name::String, data::DataFrame)\n\nSave a DataFrame to a temporary CSV file.\n\nArguments\n\nname::String: The name of the temporary file.\ndata::DataFrame: The DataFrame to save.\n\nReturns\n\nThe filepath where the DataFrame was saved.\n\nExample\n\nsave_tempfile(\"temp.csv\", DataFrame(A = 1:3, B = 4:6))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_filename-Tuple{String, ModelSelection.AllSubsetRegression.AllSubsetRegressionResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_filename","text":"get_csv_filename(filename::String, result::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult)\n\nGet a filename for a CSV file that stores the results of an all subset regression.\n\nArguments\n\nfilename::String: The original filename.\nresult::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult: The result of the all subset regression.\n\nReturns\n\nThe filename for the CSV file.\n\nExample\n\nget_csv_filename(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_filename-Tuple{String, ModelSelection.CrossValidation.CrossValidationResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_filename","text":"get_csv_filename(filename::String, result::ModelSelection.CrossValidation.CrossValidationResult)\n\nGet a filename for a CSV file that stores the results of cross validation.\n\nArguments\n\nfilename::String: The original filename.\nresult::ModelSelection.CrossValidation.CrossValidationResult: The result of cross validation.\n\nReturns\n\nThe filename for the CSV file.\n\nExample\n\nget_csv_filename(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_txt_filename-Tuple{String}","page":"Utils","title":"ModelSelectionGUI.get_txt_filename","text":"get_txt_filename(filename::String)\n\nGet a filename for a TXT file that stores summary data.\n\nArguments\n\nfilename::String: The original filename.\n\nReturns\n\nThe filename for the TXT file.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_from_result-Tuple{String, ModelSelectionResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_from_result","text":"get_csv_from_result(filename::String, result::ModelSelectionResult)\n\nGet CSV formatted data from a result of a model selection process.\n\nArguments\n\nfilename::String: The original filename.\nresult::ModelSelectionResult: The result of the model selection process.\n\nReturns\n\nA dictionary containing the filename and CSV data.\n\nExample\n\nget_csv_from_result(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_parameters-Tuple{Dict{String, Any}}","page":"Utils","title":"ModelSelectionGUI.get_parameters","text":"get_parameters(raw_payload::Dict{String,Any})\n\nConvert a dictionary with string keys to a dictionary with symbol keys.\n\nArguments\n\nraw_payload::Dict{String,Any}: A dictionary with string keys.\n\nReturns\n\nA dictionary with the same keys and values, but with the keys converted to symbols.\n\nExample\n\nget_parameters(Dict(\"a\" => 1, \"b\" => 2))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.to_dict-Tuple{ModelSelectionJob}","page":"Utils","title":"ModelSelectionGUI.to_dict","text":"to_dict(job::ModelSelectionJob)\n\nConvert a ModelSelectionJob object to a dictionary.\n\nArguments\n\njob::ModelSelectionJob: The job to convert.\n\nReturns\n\nA dictionary representation of the job.\n\nExample\n\nto_dict(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_request_job_id-Tuple{Any}","page":"Utils","title":"ModelSelectionGUI.get_request_job_id","text":"get_request_job_id(params::Any)\n\nGet the job id from a set of parameters.\n\nArguments\n\nparams::Any: The parameters to search.\n\nReturns\n\nThe job id if it exists, nothing otherwise.\n\nExample\n\nget_request_job_id(Dict(\"id\" => 1))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_request_filehash-Tuple{Any}","page":"Utils","title":"ModelSelectionGUI.get_request_filehash","text":"get_request_filehash(params::Any)\n\nGet the file hash from a set of parameters.\n\nArguments\n\nparams::Any: The parameters to search.\n\nReturns\n\nThe file hash if it exists, nothing otherwise.\n\nExample\n\nget_request_filehash(Dict(\"filehash\" => \"abc\"))\n\n\n\n\n\n","category":"method"},{"location":"configuration/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/#Environment-variables","page":"Configuration","title":"Environment variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The package supports the following environment variables for configuration:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Name Default Description\nSERVER_PORT 8000 The port number on which the web server will listen\nCLIENT_PORT SERVER_PORT + 1 The port number on which the client will listen\nOPEN_BROWSER false Open the web browser after starting the server with the documentation\nOPEN_CLIENT false Open the web browser after starting the server with the client\nSERVER_URL 127.0.0.1 Defines the base URL of the server","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nYou can choose to set these environment variables based on your specific requirements. If not set, the package will use the default values mentioned above.","category":"page"},{"location":"configuration/#Setting-variables","page":"Configuration","title":"Setting variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To set environment variables, you can create a .env file in the root directory of your project. ","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"tip: Tip\nYou can copy the .env.template file as a starting point. Then, modify the values in the .env file according to your desired configuration.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To set an environment variable, you sould use the following syntax:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"# .env file\r\nexport VARIABLE_NAME=value","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"For example, to set the SERVER_PORT environment variable to 9000, you can use:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"export SERVER_PORT=9000","category":"page"},{"location":"configuration/#Load-custom-dotenv-file","page":"Configuration","title":"Load custom dotenv file","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The dotenv file will .env as default. If a custom file is needed, you can use the command in the Julia REPL:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"start(dotenv=\".mycustomenv\")\r\n\r\n# or\r\n\r\nload_envvars(\".mycustomenv\")\r\nstart()","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nPlease note that modifying environment variables may require restarting the web server for the changes to take effect.","category":"page"},{"location":"todo/#TODO","page":"Todo","title":"TODO","text":"","category":"section"},{"location":"todo/","page":"Todo","title":"Todo","text":"This section is an overview of pending tasks, improvements, and future plans for the ModelSelectionGUI package.","category":"page"},{"location":"todo/","page":"Todo","title":"Todo","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"TODO.md\"))","category":"page"},{"location":"license/#Licence","page":"License","title":"Licence","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"LICENSE\"))","category":"page"},{"location":"#ModelSelectionGUI","page":"Home","title":"ModelSelectionGUI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The ModelSelectionGUI is a web server package designed to provide a user-friendly interface for utilizing the ModelSelection package. It consists of a backend and an optional frontend that offers a graphical user interface (GUI) for seamless interaction with the underlying ModelSelection functionality.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Web server backend: The package includes a web server backend that handles requests and responses between the user and the ModelSelection.jl package.\nGood documentation: The package provides a comprehensive API documentation powered by Swagger.\nGraphical User Interface (GUI): The optional frontend provides a GUI that allows users to interact with the ModelSelection package using a visual interface, making it easier to explore and utilize the various functionalities.\nEasy Integration: The ModelSelectionGUI is designed to seamlessly integrate with the ModelSelection package, providing a user-friendly interface to access and utilize its capabilities without requiring in-depth knowledge of the underlying Julia code.","category":"page"},{"location":"#ModelSelection-package","page":"Home","title":"ModelSelection package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ModelSelectionGUI package functions as an interface with ModelSelection.jl. For more details about the functionalities and features provided by ModelSelection.jl, please visit the package repository.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! If you encounter any issues or have suggestions for improvements, please open an issue or submit a pull request on the repository. Make sure to follow the guidelines outlined in the Contributing section.","category":"page"},{"location":"#TODO-List","page":"Home","title":"TODO List","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For an overview of pending tasks, improvements, and future plans for the ModelSelectionGUI package, please refer to the TODO section.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the MIT License.","category":"page"},{"location":"library/public/#Development","page":"Public","title":"Development","text":"","category":"section"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for Documenter.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"library/public/#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"load_envvars(path::String = ENV_FILE_DEFAULT)\r\nreset_envvars()\r\nstart(; server_port::Union{Int, Nothing} = nothing, client_port::Union{Int, Nothing} = nothing, open_browser::Union{Bool, Nothing} = nothing, open_client::Union{Bool, Nothing} = nothing, dotenv::String = ENV_FILE_DEFAULT)\r\nstop()","category":"page"},{"location":"library/public/#ModelSelectionGUI.load_envvars","page":"Public","title":"ModelSelectionGUI.load_envvars","text":"load_envvars(path::String = ENV_FILE_DEFAULT)\n\nLoad environment variables from a .env file specified by path. If a certain environment variable is defined in the file, the corresponding global variable will be updated. Otherwise, the default value will be used.\n\npath: Path to the .env file. If not provided, the default path (as defined in ENV_FILE_DEFAULT) is used.\n\nGlobal variables updated by this function are SERVER_PORT, CLIENT_PORT, OPEN_BROWSER, OPEN_CLIENT, and SERVER_URL.\n\nExamples\n\nload_envvars(\"./path/to/.env\")\n\n\n\n\n\n","category":"function"},{"location":"library/public/#ModelSelectionGUI.reset_envvars-Tuple{}","page":"Public","title":"ModelSelectionGUI.reset_envvars","text":"reset_envvars()\n\nReset environment variables to the default values.\n\nGlobal variables updated by this function are SERVER_PORT, CLIENT_PORT, OPEN_BROWSER, OPEN_CLIENT, and SERVER_URL.\n\nExamples\n\nreset_envvars()\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.start-Tuple{}","page":"Public","title":"ModelSelectionGUI.start","text":"start(; server_port::Union{Int, Nothing} = nothing, client_port::Union{Int, Nothing} = nothing, open_browser::Union{Bool, Nothing} = nothing, open_client::Union{Bool, Nothing} = nothing, dotenv::String = ENV_FILE_DEFAULT)\n\nInitiate the server with optional parameters. Default values are loaded from environment variables if the parameters are not provided.\n\nserver_port: Port number for the server. If nothing, the default server port (as defined in the environment variables) is used.\nclient_port: Port number for the client. If nothing, the default client port (as defined in the environment variables) is used.\nopen_browser: If true, opens a new browser window with the server port after server starts. If nothing, follows the default setting in the environment variables.\nopen_client: If true, opens a new browser window with the client port after server starts. If nothing, follows the default setting in the environment variables.\ndotenv: Specifies the path to the file containing environment variables.\n\nThis function also sets up several routes, a WebSocket channel, and initiates a background task.\n\nExamples\n\nstart(server_port = 8080, open_browser = true)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.stop-Tuple{}","page":"Public","title":"ModelSelectionGUI.stop","text":"stop()\n\nShut down the server.\n\nThis function calls the down() function to stop the server.\n\nExamples\n\nstop()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"This section of the documentation is dedicated to explaining the internal global variables used in this package. ","category":"page"},{"location":"library/internals/variables/#Index","page":"Variables","title":"Index","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"Pages = [\"variables.md\"]","category":"page"},{"location":"library/internals/variables/#Contents","page":"Variables","title":"Contents","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"ModelSelectionGUI.SERVER_PORT\r\nModelSelectionGUI.CLIENT_PORT\r\nModelSelectionGUI.OPEN_BROWSER\r\nModelSelectionGUI.OPEN_CLIENT\r\nModelSelectionGUI.SERVER_URL","category":"page"},{"location":"library/internals/variables/#ModelSelectionGUI.SERVER_PORT","page":"Variables","title":"ModelSelectionGUI.SERVER_PORT","text":"SERVER_PORT\n\nThe port number on which the web server will listen. By default, it uses the value of SERVER_PORT_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.CLIENT_PORT","page":"Variables","title":"ModelSelectionGUI.CLIENT_PORT","text":"CLIENT_PORT\n\nThe port number on which the client will listen. It's set to be one port number higher than the server's listening port (SERVER_PORT + 1).\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.OPEN_BROWSER","page":"Variables","title":"ModelSelectionGUI.OPEN_BROWSER","text":"OPEN_BROWSER\n\nOpen the web browser after starting the server with the documentation. By default, it uses the value of OPEN_BROWSER_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.OPEN_CLIENT","page":"Variables","title":"ModelSelectionGUI.OPEN_CLIENT","text":"OPEN_CLIENT\n\nOpen the web browser after starting the server with the client. By default, it uses the value of OPEN_CLIENT_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.SERVER_URL","page":"Variables","title":"ModelSelectionGUI.SERVER_URL","text":"SERVER_URL\n\nDefines the base URL of the server. By default, it uses the value of SERVER_URL_DEFAULT.\n\n\n\n\n\n","category":"constant"}]
}
