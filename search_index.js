var documenterSearchIndex = {"docs":
[{"location":"library/internals/responses/#Responses","page":"Responses","title":"Responses","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"This section of the package is responsible for response-generating. These functions ensure the proper structure for each endpoint response.","category":"page"},{"location":"library/internals/responses/#Index","page":"Responses","title":"Index","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"Pages = [\"responses.md\"]","category":"page"},{"location":"library/internals/responses/#Contents","page":"Responses","title":"Contents","text":"","category":"section"},{"location":"library/internals/responses/","page":"Responses","title":"Responses","text":"ModelSelectionGUI.server_info_response(ncores::Int64, nworkers::Int64, model_selection_version::String, julia_version::String, jobs_queue_size::Int64)\r\nModelSelectionGUI.upload_response(filename::String, filehash::String, datanames::Array{String,1}, nobs::Int64)\r\nModelSelectionGUI.job_info_response(job::ModelSelectionJob)\r\nModelSelectionGUI.job_results_response(job::ModelSelectionJob, resulttype::Symbol)\r\nModelSelectionGUI.estimators_response(estimators::Dict{Symbol, Dict{Symbol, Any}})","category":"page"},{"location":"library/internals/responses/#ModelSelectionGUI.server_info_response-Tuple{Int64, Int64, String, String, Int64}","page":"Responses","title":"ModelSelectionGUI.server_info_response","text":"server_info_response(ncores::Int64, nworkers::Int64, model_selection_version::String, julia_version::String, jobs_queue_size::Int64)\n\nCreates a JSON object with server information.\n\nParameters\n\nncores::Int64: The number of cores on the server.\nnworkers::Int64: The number of worker threads on the server.\nmodel_selection_version::String: The version number of the ModelSelection package.\njulia_version::String: The version number of Julia being used.\njobs_queue_size::Int64: The size of the job queue.\n\nReturns\n\nObject: A JSON object containing the server information.\n\nExample\n\nserver_info_response(4, 8, \"1.0.0\", \"1.6.1\", 10)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.upload_response-Tuple{String, String, Vector{String}, Int64}","page":"Responses","title":"ModelSelectionGUI.upload_response","text":"upload_response(filename::String, filehash::String, datanames::Array{String,1}, nobs::Int64)\n\nCreates a JSON object to provide a response for a file upload operation.\n\nParameters\n\nfilename::String: The name of the uploaded file.\nfilehash::String: The hash value of the uploaded file.\ndatanames::Array{String,1}: An array of data names from the uploaded file.\nnobs::Int64: The number of observations in the uploaded file.\n\nReturns\n\nObject: A JSON object with details about the uploaded file.\n\nExample\n\nupload_response(\"data.csv\", \"abc123\", [\"col1\", \"col2\"], 100)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.job_info_response-Tuple{ModelSelectionJob}","page":"Responses","title":"ModelSelectionGUI.job_info_response","text":"job_info_response(job::ModelSelectionJob)\n\nCreates a JSON object that provides information about a ModelSelectionJob.\n\nParameters\n\njob::ModelSelectionJob: The ModelSelectionJob instance to extract information from.\n\nReturns\n\nObject: A JSON object with the details of the ModelSelectionJob.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\njob_info_response(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.job_results_response-Tuple{ModelSelectionJob, Symbol}","page":"Responses","title":"ModelSelectionGUI.job_results_response","text":"job_results_response(job::ModelSelectionJob, resulttype::Symbol)\n\nGenerates an HTTP response with information about the results of a ModelSelectionJob  depending on the specified result type.\n\nParameters\n\njob::ModelSelectionJob: The ModelSelectionJob instance from which to extract results.\nresulttype::Symbol: The type of result to extract. This can be one of: :summary, \n\n:allsubsetregression, :crossvalidation.\n\nReturns\n\nHTTP.Response: A HTTP response object.\nIf resulttype is :summary, the response body is a text string \ncontaining a summary of the job's results.\nIf resulttype is :allsubsetregression or \n:crossvalidation, the response body is a CSV-formatted string of the corresponding results. \nIf there are no results of the requested type, a 400 (Bad Request) HTTP response is returned.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\njob_results_response(job, :summary)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/responses/#ModelSelectionGUI.estimators_response-Tuple{Dict{Symbol, Dict{Symbol, Any}}}","page":"Responses","title":"ModelSelectionGUI.estimators_response","text":"estimators_response(estimators::Dict{Symbol, Dict{Symbol, Any}})\n\nCreate a response dictionary containing estimators. This function takes a dictionary estimators as input, where the keys are symbols representing the names of estimators, and the values are dictionaries containing information about each estimator.\n\nParameters\n\nestimators::Dict{Symbol, Dict{Symbol, Any}}: A dictionary of estimators.\n\nReturns\n\nHTTP.Response: A HTTP response object.\n\nExample\n\nestimators = const ESTIMATORS = Dict(\n    \"OLS\" => Dict(\"name\" => \"Ordinary Least Squares\"),\n    \"Logit\" => Dict(\"name\" => \"Logistic Regression\"),\n)\nestimators_response(estimators)\n\n\n\n\n\n","category":"method"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"CONTRIBUTING.md\"))","category":"page"},{"location":"start/#Getting-started","page":"Getting Started","title":"Getting started","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"This basic example demonstrates how to use the package in its simplest way. However, for a more in-depth understanding of the various options and features, please navigate to the Usage section where all available functionalities and usage scenarios are thoroughly explained.","category":"page"},{"location":"start/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"ModelSelectionGUI can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"pkg> add ModelSelectionGUI","category":"page"},{"location":"start/#Usage","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"To start the web server and access the GUI, follow these steps:","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"using ModelSelectionGUI\nstart()","category":"page"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"note: Note\nIf the web client is enabled open your web browser and enter the following URL: http://127.0.0.1:8000. Please change the host and port for the one that is in your configuration.","category":"page"},{"location":"api/rest/swagger/#Swagger-Documentation","page":"Swagger","title":"Swagger Documentation","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"The package provides a comprehensive API documentation powered by Swagger. You can access the API documentation by visiting the /docs URL of your deployed application. This documentation offers a detailed overview of all available endpoints, request/response examples, and parameter details.","category":"page"},{"location":"api/rest/swagger/#Accessing-the-Swagger-Documentation","page":"Swagger","title":"Accessing the Swagger Documentation","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"To access the Swagger documentation for the ModelSelectionGUI package, follow these steps:","category":"page"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"Start the server and ensure it is running.\nOpen a web browser.\nIn the address bar, enter the URL of your deployed application followed by /docs. For example: http://127.0.0.1/docs.\nThe Swagger documentation page will load, displaying all the available endpoints, their descriptions, and other relevant information.","category":"page"},{"location":"api/rest/swagger/#Using-Swagger-for-Testing-and-Exploration","page":"Swagger","title":"Using Swagger for Testing and Exploration","text":"","category":"section"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"The Swagger documentation not only serves as a reference for the endpoints but also provides an interactive environment for testing and exploring the API. With Swagger UI, you can easily send requests to different endpoints, view their responses, and experiment with various parameters.","category":"page"},{"location":"api/rest/swagger/","page":"Swagger","title":"Swagger","text":"Feel free to leverage the Swagger documentation to understand the functionality of the ModelSelectionGUI package, explore different endpoints, and test API requests right from your browser.","category":"page"},{"location":"library/internals/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"This section of the documentation is dedicated to explaining the custom data structures that are defined and used within our package.","category":"page"},{"location":"library/internals/types/#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"library/internals/types/#Contents","page":"Types","title":"Contents","text":"","category":"section"},{"location":"library/internals/types/","page":"Types","title":"Types","text":"Modules = [ModelSelectionGUI]\r\nOrder   = [:type]","category":"page"},{"location":"library/internals/types/#ModelSelectionGUI.ModelSelectionJob","page":"Types","title":"ModelSelectionGUI.ModelSelectionJob","text":"ModelSelectionJob\n\nA mutable struct that represents a job for performing model selection.\n\nFields\n\nid::String: The unique identifier (UUID) of the model selection job.\nfilename::String: The name of the file used for model selection.\ntempfile::String: The name of a temporary file used during the job's processing.\nfilehash::String: The unique identifier (UUID) of the file used for model selection.\nestimator::Symbol: The estimator used for model selection.\nequation::String: The equation or formula used for model selection.\nparameters::Dict{Symbol,Any}: The parameters used for model selection, including any additional parameters specified in the request.\nstatus::Symbol: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\ntime_enqueued::DateTime: The timestamp when the model selection job was enqueued.\ntime_started::Union{DateTime, Nothing}: The timestamp when the model selection job started, if applicable.\ntime_finished::Union{DateTime, Nothing}: The timestamp when the model selection job finished, if applicable.\nmodelselection_data::Union{ModelSelectionData, Nothing}: The data used for model selection. This is Nothing if the data is not available.\nmsg::Union{String, Nothing}: A message associated with the job. This is typically used for reporting errors or other important information.\n\nExample\n\nresult = ModelSelectionJob(\n    filename = \"data.csv\",\n    tempfile = \"/tmp/12413947-1597-4b1b-a798-efcb2293e808.csv\",\n    filehash = \"12413947-95bc-4573-a804-efcb2293e808\",\n    payload = {\n        :estimator: :ols,\n        :equation: \"y x1 x2 x3\",\n        \"ttest\": true,\n    },\n)\n\n\n\n\n\n","category":"type"},{"location":"library/internals/exceptions/#Exceptions","page":"Exceptions","title":"Exceptions","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"This section of the package is responsible for controlling how and when a window is opened.","category":"page"},{"location":"library/internals/exceptions/#Index","page":"Exceptions","title":"Index","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"Pages = [\"exceptions.md\"]","category":"page"},{"location":"library/internals/exceptions/#Contents","page":"Exceptions","title":"Contents","text":"","category":"section"},{"location":"library/internals/exceptions/","page":"Exceptions","title":"Exceptions","text":"ModelSelectionGUI.bad_request_exception(message)","category":"page"},{"location":"library/internals/exceptions/#ModelSelectionGUI.bad_request_exception-Tuple{Any}","page":"Exceptions","title":"ModelSelectionGUI.bad_request_exception","text":"bad_request_exception(message)\n\nCreates an HTTP response with a 400 (Bad Request) status code.\n\nParameters\n\nmessage::String: The message to be sent in the HTTP response.\n\nReturns\n\nHTTP.Response: An HTTP response with a status code of 400 and the provided message.\n\nExample\n\nbad_request_exception(\"Invalid request parameters.\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#Jobs","page":"Jobs","title":"Jobs","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"The section of the package is responsible for handle the jobs.","category":"page"},{"location":"library/internals/jobs/#Index","page":"Jobs","title":"Index","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"Pages = [\"jobs.md\"]","category":"page"},{"location":"library/internals/jobs/#Contents","page":"Jobs","title":"Contents","text":"","category":"section"},{"location":"library/internals/jobs/","page":"Jobs","title":"Jobs","text":"ModelSelectionGUI.pending_queue\r\nModelSelectionGUI.finished_queue\r\nModelSelectionGUI.jobs_files\r\nModelSelectionGUI.pending_queue_condition\r\nModelSelectionGUI.finished_task_condition\r\nModelSelectionGUI.current_job\r\nModelSelectionGUI.interrupted_task\r\nModelSelectionGUI.add_pending_job(job::ModelSelectionJob)\r\nModelSelectionGUI.get_job_file(filehash::String)\r\nModelSelectionGUI.consume_pending_jobs()\r\nModelSelectionGUI.consume_pending_job()\r\nModelSelectionGUI.run_job(job::ModelSelectionJob)\r\nModelSelectionGUI.get_pending_queue_length()\r\nModelSelectionGUI.add_job_file(filehash::String, tempfile::String, filename::String)\r\nModelSelectionGUI.job_notify(message::String, data::Union{Any,Nothing} = nothing)\r\nModelSelectionGUI.get_job(queue::Vector{ModelSelectionJob}, id::String)\r\nModelSelectionGUI.get_job(id::String)\r\nModelSelectionGUI.set_current_job(job::ModelSelectionJob)\r\nModelSelectionGUI.get_pending_job(id::String)\r\nModelSelectionGUI.get_current_job(id::Union{String,Nothing} = nothing)\r\nModelSelectionGUI.get_finished_job(id::String)\r\nModelSelectionGUI.clear_pending_queue()\r\nModelSelectionGUI.clear_current_job()\r\nModelSelectionGUI.clear_finished_queue()\r\nModelSelectionGUI.clear_all_jobs()\r\nModelSelectionGUI.start_task()\r\nModelSelectionGUI.stop_task()","category":"page"},{"location":"library/internals/jobs/#ModelSelectionGUI.pending_queue","page":"Jobs","title":"ModelSelectionGUI.pending_queue","text":"pending_queue::Vector{ModelSelectionJob}()\n\nA vector to store pending model selection jobs.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.finished_queue","page":"Jobs","title":"ModelSelectionGUI.finished_queue","text":"finished_queue::Vector{ModelSelectionJob}()\n\nA vector to store finished model selection jobs.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.jobs_files","page":"Jobs","title":"ModelSelectionGUI.jobs_files","text":"jobs_files::Dict{String, Dict{Symbol, String}}()\n\nA dictionary that maps job hashes to their corresponding file information.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.pending_queue_condition","page":"Jobs","title":"ModelSelectionGUI.pending_queue_condition","text":"pending_queue_condition::Condition()\n\nA condition variable to signal changes in the pending job queue.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.finished_task_condition","page":"Jobs","title":"ModelSelectionGUI.finished_task_condition","text":"finished_task_condition::Condition()\n\nA condition variable to signal changes in the finished job queue.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.current_job","page":"Jobs","title":"ModelSelectionGUI.current_job","text":"current_job::Union{ModelSelectionJob, Nothing}\n\nA variable to store the current job being processed, or nothing if no job is active.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.interrupted_task","page":"Jobs","title":"ModelSelectionGUI.interrupted_task","text":"interrupted_task::Bool\n\nA boolean flag indicating whether a task has been interrupted.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/jobs/#ModelSelectionGUI.add_pending_job-Tuple{ModelSelectionJob}","page":"Jobs","title":"ModelSelectionGUI.add_pending_job","text":"add_pending_job(job::ModelSelectionJob)\n\nAdds the given job to the pending queue. After adding the job, the function notifies condition variable.\n\nParameters\n\njob::ModelSelectionJob: The job to be added to the pending queue.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\npending_queue_condition::Condition: The condition variable for signaling changes in the pending job queue.\n\nReturns\n\nModelSelectionJob: The ModelSelectionJob object.\n\nExample\n\njob = ModelSelectionJob(...)\nadd_pending_job(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job_file-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job_file","text":"get_job_file(filehash::String)\n\nReturns the tempfile and filename associated with the specified filehash.\n\nParameters\n\nfilehash::String: The file hash.\n\nGlobals\n\njob_files::Dict{String, Dict{Symbol, String}}: The dictionary that maps job hashes to their corresponding file information.\n\nReturns\n\nDict{Symbol, String}: A Dict with the tempfile and filename.\n\nExample\n\nget_job_file(\"441c3a47-c302-43b6-8a2d-fe145baa29eb\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.consume_pending_jobs-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.consume_pending_jobs","text":"consume_pending_jobs()\n\nConsumes continuously pending jobs from the pending_queue and processes them until interrupted.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\npending_queue_condition::Condition: The condition variable for signaling changes in the pending job queue.\nfinished_task_condition::Condition: The condition variable for signaling changes in the finished job queue.\ninterrupted_task::Bool: A boolean flag indicating whether a task has been interrupted.\n\nExample\n\nconsume_pending_jobs()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.consume_pending_job-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.consume_pending_job","text":"consume_pending_job()\n\nConsume a pending job form the pending_queue and executes it.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\ncurrent_job::ModelSelectionJob: The current job being processed.\n\nExample\n\nconsume_pending_job()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.run_job-Tuple{ModelSelectionJob}","page":"Jobs","title":"ModelSelectionGUI.run_job","text":"run_job(job::ModelSelectionJob)\n\nRuns the specified ModelSelectionJob, reads the necessary data from the job's tempfile,  and performs model selection. In case of any exception, sets the job status to FAILED and  saves the error message.\n\nParameters\n\njob::ModelSelectionJob: The ModelSelectionJob instance to run.\n\nGlobals\n\nfinished_queue::Vector{ModelSelectionJob}: The queue storing finished jobs.\ncurrent_job::ModelSelectionJob: The current job being processed.\n\nExample\n\njob = ModelSelectionJob(...)  # job is an instance of ModelSelectionJob\nrun_job(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_pending_queue_length-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.get_pending_queue_length","text":"get_pending_queue_length()\n\nReturns the number of pending jobs.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\n\nReturns\n\nInt64: The number of pending jobs jobs.\n\nExample\n\nget_pending_queue_length()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.add_job_file-Tuple{String, String, String}","page":"Jobs","title":"ModelSelectionGUI.add_job_file","text":"add_job_file(filehash::String, tempfile::String, filename::String)\n\nStores a mapping from filehash to the specified tempfile and filename.\n\nParameters\n\nfilehash::String: The file hash.\ntempfile::String: The temporary file path.\nfilename::String: The original file name.\n\nGlobals\n\njob_files::Dict{String, Dict{Symbol, String}}: The dictionary that maps job hashes to their corresponding file information.\n\nExample\n\nadd_job_file(\"441c3a47-c302-43b6-8a2d-fe145baa29eb\", \"/tmp/data.csv\", \"data.csv\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.job_notify","page":"Jobs","title":"ModelSelectionGUI.job_notify","text":"job_notify(message::String, data::Union{Dict{Any,Any},Nothing} = nothing)\n\nNotifies all subscribers on the default WebSocket channel with the specified message and data.\n\nParameters\n\nmessage::String: The message to send.\ndata::Union{Dict{Any,Any},Nothing}: The data to send.\n\nExample\n\njob_notify(\"message\", Dict(\"data\" => \"data\"))\n\n\n\n\n\n","category":"function"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job-Tuple{Vector{ModelSelectionJob}, String}","page":"Jobs","title":"ModelSelectionGUI.get_job","text":"get_job(queue::Vector{ModelSelectionJob}, id::String)\n\nSearches for a job with the specified id in the provided queue and returns it.  Returns nothing if the job is not found.\n\nParameters\n\nqueue::Vector{ModelSelectionJob}: The queue to search.\nid::String: The job id.\n\nReturns\n\nModelSelectionJob: The job with the specified id.\nNothing: If the job is not found.\n\nExample\n\nget_job(queue, \"7182939d-c5a1-4e21-a06e-182195c961fa\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_job-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_job","text":"get_job(id::String)\n\nReturns the job with the specified id from the pending jobs, the current job, or the finished jobs.  Returns nothing if the job is not found.\n\nParameters\n\nid::String: The job id.\n\nReturns\n\nModelSelectionJob: The job with the specified id.\nNothing: If the job is not found.\n\nExample\n\nget_job(\"7182939d-c5a1-4e21-a06e-182195c961fa\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.set_current_job-Tuple{ModelSelectionJob}","page":"Jobs","title":"ModelSelectionGUI.set_current_job","text":"set_current_job(job::ModelSelectionJob)\n\nSets the current job. If there is already a current job, it is replaced.\n\nParameters\n\njob::ModelSelectionJob: The job.\n\nGlobals\n\ncurrent_job::ModelSelectionJob: The current job being processed.\n\nExample\n\njob = ModelSelectionJob(...)\nset_current_job(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_pending_job-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_pending_job","text":"get_pending_job(id::String)\n\nReturns the job with the specified id from the pending jobs.  Returns nothing if the job is not found.\n\nParameters\n\nid::String: The job id.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\n\nReturns\n\nModelSelectionJob: The job with the specified id.\nNothing: If the job is not found.\n\nExample\n\nget_pending_job(\"3ea06b21-844e-4505-a912-34828fa827a1\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_current_job","page":"Jobs","title":"ModelSelectionGUI.get_current_job","text":"get_current_job(id::Union{String,Nothing} = nothing)\n\nReturns the current job. If id is specified, only returns the current job if its id matches id. Returns nothing if there is no current job or if the id does not match.\n\nParameters\n\nid::Union{String,Nothing}: The job id.\n\nReturns\n\nModelSelectionJob: The current job or the current job with the specified id.\nNothing: If the job is not found.\n\nGlobals\n\ncurrent_job::ModelSelectionJob: The current job being processed.\n\nExample\n\nget_current_job()\n\n\n\n\n\n","category":"function"},{"location":"library/internals/jobs/#ModelSelectionGUI.get_finished_job-Tuple{String}","page":"Jobs","title":"ModelSelectionGUI.get_finished_job","text":"get_finished_job(id::String)\n\nReturns the job with the specified id from the finished jobs.  Returns nothing if the job is not found.\n\nParameters\n\nid::String: The job id.\n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\n\nReturns\n\nModelSelectionJob: The job with the specified id.\nNothing: If the job is not found.\n\nExample\n\nget_finished_job(\"3ea06b21-844e-4505-a912-34828fa827a1\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_pending_queue-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_pending_queue","text":"clear_pending_queue()\n\nClear the jobs queue. \n\nGlobals\n\npending_queue::Vector{ModelSelectionJob}: The queue storing pending jobs.\n\nExample\n\nclear_pending_queue()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_current_job-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_current_job","text":"clear_current_job()\n\nClear the current job.\n\nGlobals\n\ncurrent_job::ModelSelectionJob: The current job being processed.\n\nExample\n\nclear_current_job()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_finished_queue-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_finished_queue","text":"clear_finished_queue()\n\nClear all the finished jobs. \n\nGlobals\n\nfinished_queue::Vector{ModelSelectionJob}: The queue storing finished jobs.\n\nExample\n\nclear_finished_queue()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.clear_all_jobs-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.clear_all_jobs","text":"clear_all_jobs()\n\nClears all job queues (pending, current, finished).\n\nExample\n\nclear_all_jobs()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.start_task-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.start_task","text":"start_task()\n\nStarts the task of consuming pending jobs from the job queue in an asynchronous way. If there's already a task  running, the function simply returns without starting a new one.\n\nGlobals\n\nJOB_TASK::Task: The task consuming pending jobs.\n\nExample\n\nstart_task()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/jobs/#ModelSelectionGUI.stop_task-Tuple{}","page":"Jobs","title":"ModelSelectionGUI.stop_task","text":"stop_task()\n\nInterrupts the currently running task of object. If no task is running, the function does nothing.\n\nGlobals\n\nJOB_TASK::Task: The task consuming pending jobs.\ninterrupted_task::Bool: Whether the task has been interrupted.\npending_queue_condition::Condition: The condition variable for the pending queue.\nfinished_task_condition::Condition: The condition variable for the finished task.\n\nExample\n\nstop_task()\n\n\n\n\n\n","category":"method"},{"location":"news/#News","page":"News","title":"News","text":"","category":"section"},{"location":"news/","page":"News","title":"News","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"NEWS.md\"))","category":"page"},{"location":"library/internals/strings/#Strings","page":"Strings","title":"Strings","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"This section of the documentation is dedicated to explaining the purpose and usage of the various string constants used throughout our package.","category":"page"},{"location":"library/internals/strings/#Index","page":"Strings","title":"Index","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"Pages = [\"strings.md\"]","category":"page"},{"location":"library/internals/strings/#Contents","page":"Strings","title":"Contents","text":"","category":"section"},{"location":"library/internals/strings/","page":"Strings","title":"Strings","text":"ModelSelectionGUI.MISSING_JOB_ID\r\nModelSelectionGUI.FILE_NOT_SENT\r\nModelSelectionGUI.FILE_NOT_FOUND\r\nModelSelectionGUI.INVALID_CSV\r\nModelSelectionGUI.FILE_NOT_SAVED\r\nModelSelectionGUI.FILEHASH_NOT_VALID\r\nModelSelectionGUI.ESTIMATOR_MISSING\r\nModelSelectionGUI.EQUATION_MISSING\r\nModelSelectionGUI.MISSING_RESULT_TYPE\r\nModelSelectionGUI.INVALID_RESULT_TYPE\r\nModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE\r\nModelSelectionGUI.JOB_STARTING\r\nModelSelectionGUI.JOB_FINISHED\r\nModelSelectionGUI.JOB_FAILED\r\nModelSelectionGUI.INVALID_PARAMETER","category":"page"},{"location":"library/internals/strings/#ModelSelectionGUI.MISSING_JOB_ID","page":"Strings","title":"ModelSelectionGUI.MISSING_JOB_ID","text":"MISSING_JOB_ID\n\nThis constant is a string template for error messages indicating that a job with a given ID does not exist.  It's typically used in a context where you're trying to find a job by its ID and the ID does not match any existing job.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_SENT","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_SENT","text":"FILE_NOT_SENT\n\nThis constant is used when a required file was not provided or transmitted as expected in a file operation or request.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_FOUND","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_FOUND","text":"FILE_NOT_FOUND\n\nThis constant is used when a file was expected to be found in a certain location or under a certain name, but wasn't.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.INVALID_CSV","page":"Strings","title":"ModelSelectionGUI.INVALID_CSV","text":"INVALID_CSV\n\nThis constant indicates that a file that was expected to be in the CSV format was not valid CSV.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILE_NOT_SAVED","page":"Strings","title":"ModelSelectionGUI.FILE_NOT_SAVED","text":"FILE_NOT_SAVED\n\nThis constant is used when there was a problem or an error when attempting to save a file.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.FILEHASH_NOT_VALID","page":"Strings","title":"ModelSelectionGUI.FILEHASH_NOT_VALID","text":"FILEHASH_NOT_VALID\n\nThis constant is a string template for error messages indicating that a given file hash is not valid. It's typically used when you're validating the hash of a file.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.ESTIMATOR_MISSING","page":"Strings","title":"ModelSelectionGUI.ESTIMATOR_MISSING","text":"ESTIMATOR_MISSING\n\nThis constant is used when an expected estimator was not provided in the context of a model or analysis.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.EQUATION_MISSING","page":"Strings","title":"ModelSelectionGUI.EQUATION_MISSING","text":"EQUATION_MISSING\n\nThis constant is used when an equation, which is required for a particular calculation or operation, was not provided.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.MISSING_RESULT_TYPE","page":"Strings","title":"ModelSelectionGUI.MISSING_RESULT_TYPE","text":"MISSING_RESULT_TYPE\n\nThis constant is used when a result type, which is required to process or categorize an output, is not provided.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.INVALID_RESULT_TYPE","page":"Strings","title":"ModelSelectionGUI.INVALID_RESULT_TYPE","text":"INVALID_RESULT_TYPE\n\nThis constant is a string template for error messages indicating that a given result type is not valid.  It's typically used in a context where you're trying to request a result by its type and the type does not match any known result types.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE","page":"Strings","title":"ModelSelectionGUI.JOB_HAS_NOT_RESULTTYPE","text":"JOB_HAS_NOT_RESULTTYPE\n\nThis constant is a string template for error messages indicating that a job does not have a result of a specified type. It's typically used when you're trying to request a result by its type from a job and the job does not have a result of that type.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.JOB_STARTING","page":"Strings","title":"ModelSelectionGUI.JOB_STARTING","text":"JOB_STARTING\n\nConstant representing the message indicating that the job has started.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.JOB_FINISHED","page":"Strings","title":"ModelSelectionGUI.JOB_FINISHED","text":"JOB_FINISHED\n\nConstant representing the message indicating that the job has finished.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.JOB_FAILED","page":"Strings","title":"ModelSelectionGUI.JOB_FAILED","text":"JOB_FAILED\n\nConstant representing the message indicating that the job has failed.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/strings/#ModelSelectionGUI.INVALID_PARAMETER","page":"Strings","title":"ModelSelectionGUI.INVALID_PARAMETER","text":"INVALID_PARAMETER\n\nThis constant is used when a parameter, which is required for a particular calculation or operation, was not valid.\n\n\n\n\n\n","category":"constant"},{"location":"api/rest/#Rest-API-Endpoints","page":"Endpoints","title":"Rest API Endpoints","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"The Rest API endpoints are the core communication to interact with the backend services. ","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Pages = [\"index.md\"]","category":"page"},{"location":"api/rest/#Server-info","page":"Endpoints","title":"Server info","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves information about the server.","category":"page"},{"location":"api/rest/#Request","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /server-info\nMethod: GET","category":"page"},{"location":"api/rest/#Response","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json \nBody:\njulia_version: The version of Julia running on the server.\nmodel_selection_version: The version of the ModelSelection package being used.\nncores: The number of CPU cores available on the server.\nnworkers: The number of workers available for parallel processing.\njobs_queue_size: The number of jobs currently in the queue.","category":"page"},{"location":"api/rest/#Example","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/server-info\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"julia_version\": \"1.6.7\",\r\n    \"model_selection_version\": \"1.2.0\",\r\n    \"ncores\": 8,\r\n    \"nworkers\": 4,\r\n    \"jobs_queue_size\": 0\r\n}","category":"page"},{"location":"api/rest/#Estimators","page":"Endpoints","title":"Estimators","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves all available estimators from the ModelSelection.AllSubsetRegression module and the related information.","category":"page"},{"location":"api/rest/#Request-2","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /estimators\nMethod: GET","category":"page"},{"location":"api/rest/#Response-2","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json \nBody:\narray:\nname: The name of the estimator.\ncriteria: The criteria information.\navailable: The available criteria.\ndefault: The default criteria.\nmethod: The method information.\navailable: The available methods.\ndefault: The default methods.","category":"page"},{"location":"api/rest/#Example-2","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/estimators\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"[\r\n    {\r\n        \"name\": \"ols\",\r\n        \"criteria\": {\r\n            \"available\": [\"aic\", \"aicc\", \"bic\", \":cp\", \"r2adj\", \"rmse\", \"rmseout\", \"sse\"],\r\n            \"default\": [\"r2adj\"]\r\n        },\r\n        \"method\": {\r\n            \"available\": [\"qr_64\", \"qr_32\", \"qr_16\", \"cho_64\", \"cho_32\", \"cho_16\", \"svd_64\", \"svd_32\", \"svd_16\"],\r\n            \"default\": [\"qr_32\"]\r\n        },\r\n    },\r\n    {\r\n        \"name\": \"logit\",\r\n        \"criteria\": {\r\n            \"available\": [\"aic\", \"aicc\", \"bic\", \"r2adj\", \"rmseout\", \"sse\"],\r\n            \"default\": [\"r2adj\"]\r\n        },\r\n        \"method\": {\r\n            \"available\": [\"cho_64\", \"cho_32\", \"cho_16\"],\r\n            \"default\": [\"cho_32\"]\r\n        },\r\n    }\r\n]","category":"page"},{"location":"api/rest/#File-upload","page":"Endpoints","title":"File upload","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Uploads a CSV file to the server. Upon successful upload, the server will process the uploaded file for further operations.","category":"page"},{"location":"api/rest/#Request-3","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /upload-file\nMethod: POST\nContent-Type: form-data\nBody: \ndata: The CSV file to upload.","category":"page"},{"location":"api/rest/#Response-3","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nfilename: The name of the uploaded file.\nfilehash: The unique identifier (UUID) for the uploaded file.\ndatanames: The names of the columns in the CSV file.\nnobs: The number of observations (rows) in the CSV file.","category":"page"},{"location":"api/rest/#Example-3","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/upload-file\" --form \"data=@data.csv;type=text/csv\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"filename\": \"data.csv\",\r\n    \"filehash\": \"6c48451b-af17-43cb-a251-e847abc94472\",\r\n    \"datanames\": [\"y\", \"x1\", \"x2\", \"x3\", \"x4\", \"x5\"],\r\n    \"nobs\": 100\r\n}","category":"page"},{"location":"api/rest/#Enqueue-a-job","page":"Endpoints","title":"Enqueue a job","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Enqueues a model selection job for the specified file. The task will be executed after the previously queued tasks have finished.","category":"page"},{"location":"api/rest/#Request-4","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /job-enqueue/:filehash\nMethod: POST\nQuery parameter:\nfilehash: The unique identifier (UUID) of the uploaded file to perform model selection on.\nContent-Type: application/json\nBody:\nestimator: The estimator to use for model selection (e.g., \"ols\").\nequation: The equation or formula specifying the dependent and independent variables.\nttest: Flag indicating whether to perform t-tests. Default is true.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nPlease refer to the ModelSelection.jl package documentation for additional parameters that can be included in the request.","category":"page"},{"location":"api/rest/#Response-4","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nid: The unique identifier (UUID) of the model selection job.\nfilehash: The unique identifier (UUID) of the file used for model selection.\nfilename: The name of the file used for model selection.\nstatus: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\nmsg: A message associated with the status, if any.\ntime_enqueued: The timestamp when the model selection job was enqueued.\ntime_started: The timestamp when the model selection job started, if applicable.\ntime_finished: The timestamp when the model selection job finished, if applicable.\nestimator: The estimator used for model selection.\nequation: The equation or formula used for model selection.\nparameters: The parameters used for model selection, including any additional parameters specified in the request.","category":"page"},{"location":"api/rest/#Example-4","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/job-enqueue/64486929-0f7b-459a-a1d2-292258eb6580\" \\\r\n--header \"Content-Type: application/json\" \\\r\n--data \"{\r\n    \\\"estimator\\\": \\\"ols\\\",\r\n    \\\"equation\\\": \\\"y x1 x2 x3\\\",\r\n    \\\"fixedvariables\\\": [\\\"x4\\\"],\r\n    \\\"modelavg\\\": true,\r\n    \\\"ttest\\\": true,\r\n    \\\"kfoldcrossvalidation\\\": true,\r\n    \\\"numfolds\\\": 5\r\n}\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"filehash\": \"12413947-95bc-4573-a804-efcb2293e808\",\r\n    \"filename\": \"data.csv\",\r\n    \"status\": \"pending\",\r\n    \"msg\": null,\r\n    \"time_enqueued\": \"2023-06-07T16:38:11.18\",\r\n    \"time_started\": null,\r\n    \"time_finished\": null,\r\n    \"estimator\": \"ols\",\r\n    \"equation\": \"y x1 x2 x3\",\r\n    \"parameters\": {\r\n        \"ttest\": true\r\n    }\r\n}","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response contains detailed information about the initiated model selection process, including the current status and the parameters used.","category":"page"},{"location":"api/rest/#Get-job-info","page":"Endpoints","title":"Get job info","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves the info of a model selection job. If the job is finished, it also includes the summary of a model selection job.","category":"page"},{"location":"api/rest/#Request-5","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: job/:id\nMethod: GET\nQuery parameter:\nid: The unique identifier (UUID) of the model selection job.","category":"page"},{"location":"api/rest/#Response-5","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type: application/json\nBody:\nid: The unique identifier (UUID) of the model selection job.\nfilehash: The unique identifier (UUID) of the file used for model selection.\nfilename: The name of the file used for model selection.\nstatus: The status of the model selection job (\"pending\", \"running\", \"finished\", or \"failed\").\nmsg: A message associated with the status, if any.\ntime_enqueued: The timestamp when the model selection job was enqueued.\ntime_started: The timestamp when the model selection job started, if applicable.\ntime_finished: The timestamp when the model selection job finished, if applicable.\nestimator: The estimator used for model selection.\nequation: The equation or formula used for model selection.\nparameters: The parameters used for model selection, including any additional parameters specified in the request.\nresults: The results of the model selection job, including different types of analysis, if finished.","category":"page"},{"location":"api/rest/#Example-5","page":"Endpoints","title":"Example","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"cURL request:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"curl \"http://127.0.0.1:8000/jobs/99e36de3-4c47-4285-873d-7f92ed0c42ea\"","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"JSON response:","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"filehash\": \"12413947-95bc-4573-a804-efcb2293e808\",\r\n    \"filename\": \"data.csv\",\r\n    \"status\": \"pending\",\r\n    \"msg\": null,\r\n    \"time_enqueued\": \"2023-06-07T16:38:11.18\",\r\n    \"time_started\": null,\r\n    \"time_finished\": null,\r\n    \"estimator\": \"ols\",\r\n    \"equation\": \"y x1 x2 x3\",\r\n    \"parameters\": {\r\n        \"ttest\": true,\r\n    },\r\n    \"results\": {\r\n        \"crossvalidation\": {\r\n            \"average\": {},\r\n            \"median\": {}\r\n        },\r\n        \"allsubsetregression\": {\r\n            \"modelavg\": {}\r\n        },\r\n    }\r\n}","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response contains detailed information about the initiated model selection job, including the current status and the parameters used.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nIf the job is finished, it also includes the summary of a model selection job.","category":"page"},{"location":"api/rest/#Get-job-results","page":"Endpoints","title":"Get job results","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Retrieves the result file of a specific type for a model selection job.","category":"page"},{"location":"api/rest/#Request-6","page":"Endpoints","title":"Request","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"URL: /jobs/:id/results/:type\nMethod: GET\nQuery parameters:\nid: The unique identifier (UUID) of the model selection job.\ntype: The type of result file to retrieve. Possible values: summary, allsubsetregression, crossvalidation.","category":"page"},{"location":"api/rest/#Response-6","page":"Endpoints","title":"Response","text":"","category":"section"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"Status Code: 200 (OK)\nContent-Type:\nsummary: text/plain\nallsubsetregression: text/csv\ncrossvalidation: text/csv\nBody: The response returns the result file in the corresponding format based on the type specified.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe response should include appropriate headers to indicate the file type and provide options for file download or display.","category":"page"},{"location":"api/rest/","page":"Endpoints","title":"Endpoints","text":"note: Note\nThe filename is a concatenation of the original data filename and the type. Example: If the type is summary and the response is a plain text file, the following headers can be set:Content-Type: text/plain\r\nContent-Disposition: inline; filename=summary.txtExample: If the type is allsubsetregression or crossvalidation and the response is a CSV file, the following headers can be set:Content-Type: text/csv\r\nContent-Disposition: attachment; filename=result.csv","category":"page"},{"location":"api/websockets/#Websockets","page":"Websockets","title":"Websockets","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"It is possible to have a continuous status on the execution of a job using web sockets.","category":"page"},{"location":"api/websockets/#How-to-stablish-a-connection","page":"Websockets","title":"How to stablish a connection","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"URL: ws://127.0.0.1:8080\nChannel: sync","category":"page"},{"location":"api/websockets/#Example","page":"Websockets","title":"Example","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"// JavaScript\r\nconst ws = new WebSocket(\"ws://127.0.0.1:8000\");\r\nconst msg = {\r\n    channel: \"sync\",\r\n    message: \"subscribe\",\r\n    payload: {},\r\n};\r\nws.send(JSON.stringify(msg));","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"note: Note\nPlease change the host and port for the one that is in your configuration.","category":"page"},{"location":"api/websockets/#Receive-information","page":"Websockets","title":"Receive information","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"The server will be sending information about the current job in a JSON message that contains the following structure:     - id: The unique identifier (UUID) of the model selection job.     - message: The content or description of the message.     - data: Additional data associated with the message.","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"Example JSON message:","category":"page"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"{\r\n    \"id\": \"adbc7420-1597-4b1b-a798-fafd9ee5f671\",\r\n    \"message\": \"Running regressions\",\r\n    \"data\": {\r\n        \"progress\": 20,\r\n        \"total\": 100\r\n    }\r\n}","category":"page"},{"location":"api/websockets/#Example-2","page":"Websockets","title":"Example","text":"","category":"section"},{"location":"api/websockets/","page":"Websockets","title":"Websockets","text":"// JavaScript\r\nws.onmessage = (event) => {\r\n  console.log(event.data);\r\n}","category":"page"},{"location":"library/internals/views/#Views","page":"Views","title":"Views","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"This section of the documentation is dedicated to explaining the API views to handle HTTP requests and responses. ","category":"page"},{"location":"library/internals/views/#Index","page":"Views","title":"Index","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"Pages = [\"views.md\"]","category":"page"},{"location":"library/internals/views/#Contents","page":"Views","title":"Contents","text":"","category":"section"},{"location":"library/internals/views/","page":"Views","title":"Views","text":"ModelSelectionGUI.home_view()\r\nModelSelectionGUI.docs_view()\r\nModelSelectionGUI.server_info_view()\r\nModelSelectionGUI.estimators_view()\r\nModelSelectionGUI.upload_file_view()\r\nModelSelectionGUI.job_enqueue_view()\r\nModelSelectionGUI.job_info_view()\r\nModelSelectionGUI.job_results_view()\r\nModelSelectionGUI.websocket_channel_view()","category":"page"},{"location":"library/internals/views/#ModelSelectionGUI.home_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.home_view","text":"home_view()\n\nThe function handles the home page view. Returns a simple HTML string \"ModelSelectionGUI\".\n\nReturns\n\nHTTP.Response: A simple HTML string \"ModelSelectionGUI\".\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.docs_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.docs_view","text":"docs_view()\n\nThe functions render the Swagger UI documentation of the API from the `swagger_document` data.\n\nReturns\n\nHTTP.Response: A page with the swagger documentation.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.server_info_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.server_info_view","text":"server_info_view()\n\nReturns information about the server.\n\nReturns\n\nHTTP.Response: A JSON response with the server information.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.estimators_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.estimators_view","text":"estimators_view()\n\nGet a view of all available estimators. This function returns a view of all available estimators from the ModelSelection.AllSubsetRegression module.\n\nReturns\n\nresponse::String: A JSON string representation of the estimators.\n\nReturns\n\nHTTP.Response: A JSON response with the server information.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.upload_file_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.upload_file_view","text":"upload_file_view()\n\nUploads a CSV file to the server. Upon successful upload, the server will process the uploaded file for further operations.\n\nReturns\n\nHTTP.Response: A JSON response with information about the saved file.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_enqueue_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_enqueue_view","text":"job_enqueue_view()\n\nEnqueues a model selection job for the specified file. The task will be executed after the previously queued tasks have finished.\n\nReturns\n\nHTTP.Response: A JSON response with information about the created job.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_info_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_info_view","text":"job_info_view()\n\nReturns the info of a model selection job. If the job is finished, it also includes the summary of a model selection job.\n\nReturns\n\nHTTP.Response: A JSON response with information about the selected job.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.job_results_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.job_results_view","text":"jobresultsview()\n\nReturns the result file of a specific type for a model selection job.\n\nReturns\n\nHTTP.Response: A text file with the selected result.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/views/#ModelSelectionGUI.websocket_channel_view-Tuple{}","page":"Views","title":"ModelSelectionGUI.websocket_channel_view","text":"websocket_channel_view()\n\nThe function handles the view for WebSocket channel subscriptions.  It subscribes the client to the default WebSocket channel and returns a confirmation string.\n\nReturns\n\nString: A confirmation string.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"This section of the documentation provides detailed information about the constants used throughout our application.","category":"page"},{"location":"library/internals/constants/#Index","page":"Constants","title":"Index","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"Pages = [\"constants.md\"]","category":"page"},{"location":"library/internals/constants/#Contents","page":"Constants","title":"Contents","text":"","category":"section"},{"location":"library/internals/constants/","page":"Constants","title":"Constants","text":"ModelSelectionGUI.MODEL_SELECTION_NAME\r\nModelSelectionGUI.MODEL_SELECTION_VER\r\nModelSelectionGUI.ENV_FILE_DEFAULT\r\nModelSelectionGUI.SERVER_HOST_DEFAULT\r\nModelSelectionGUI.SERVER_PORT_DEFAULT\r\nModelSelectionGUI.SSL_ENABLED_DEFAULT\r\nModelSelectionGUI.OPEN_DOCUMENTATION_DEFAULT\r\nModelSelectionGUI.OPEN_CLIENT_DEFAULT\r\nModelSelectionGUI.DATA\r\nModelSelectionGUI.FILEHASH\r\nModelSelectionGUI.FILENAME\r\nModelSelectionGUI.ID\r\nModelSelectionGUI.MESSAGE\r\nModelSelectionGUI.NAME\r\nModelSelectionGUI.PARAMETERS\r\nModelSelectionGUI.TEMP_FILENAME\r\nModelSelectionGUI.NCORES\r\nModelSelectionGUI.NWORKERS\r\nModelSelectionGUI.MODEL_SELECTION_VERSION\r\nModelSelectionGUI.JULIA_VERSION\r\nModelSelectionGUI.PENDING_QUEUE_SIZE\r\nModelSelectionGUI.STATUS\r\nModelSelectionGUI.ENQUEUED\r\nModelSelectionGUI.RUNNING\r\nModelSelectionGUI.FINISHED\r\nModelSelectionGUI.FAILED\r\nModelSelectionGUI.PENDING\r\nModelSelectionGUI.ESTIMATOR\r\nModelSelectionGUI.EQUATION\r\nModelSelectionGUI.DATANAMES\r\nModelSelectionGUI.NOBS\r\nModelSelectionGUI.TIME_ENQUEUED\r\nModelSelectionGUI.TIME_STARTED\r\nModelSelectionGUI.TIME_FINISHED\r\nModelSelectionGUI.MSG\r\nModelSelectionGUI.ERROR\r\nModelSelectionGUI.ALLSUBSETREGRESSION\r\nModelSelectionGUI.CROSSVALIDATION\r\nModelSelectionGUI.SUMMARY\r\nModelSelectionGUI.AVAILABLE_RESULTS_TYPES\r\nModelSelectionGUI.DEFAULT_WS_CHANNEL\r\nModelSelectionGUI.RESULTS\r\nModelSelectionGUI.CSV_MIME\r\nModelSelectionGUI.PLAIN_MIME\r\nModelSelectionGUI.SWAGGER_DOCUMENT_FILE\r\nModelSelectionGUI.FRONTEND_INDEX","category":"page"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_NAME","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_NAME","text":"MODEL_SELECTION_NAME\n\nName of the ModelSelection package.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_VER","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_VER","text":"MODEL_SELECTION_VER\n\nVersion of the ModelSelection package.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ENV_FILE_DEFAULT","page":"Constants","title":"ModelSelectionGUI.ENV_FILE_DEFAULT","text":"ENV_FILE_DEFAULT\n\nDefault path for the .env file used for storing environment variables. The default path is `.envv.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SERVER_HOST_DEFAULT","page":"Constants","title":"ModelSelectionGUI.SERVER_HOST_DEFAULT","text":"SERVER_HOST_DEFAULT\n\nDefault base URL for the server. The default URL is 127.0.0.1.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SERVER_PORT_DEFAULT","page":"Constants","title":"ModelSelectionGUI.SERVER_PORT_DEFAULT","text":"SERVER_PORT_DEFAULT\n\nDefault port number for the server. The default port is 8000.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SSL_ENABLED_DEFAULT","page":"Constants","title":"ModelSelectionGUI.SSL_ENABLED_DEFAULT","text":"SSL_ENABLED_DEFAULT\n\nDefault value for whether SSL (Secure Socket Layer) is enabled in the application. The default value is false.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.OPEN_DOCUMENTATION_DEFAULT","page":"Constants","title":"ModelSelectionGUI.OPEN_DOCUMENTATION_DEFAULT","text":"OPEN_DOCUMENTATION_DEFAULT\n\nWhether to open a window with documentation automatically when the server starts for Swagger documentation. The default value is false.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.OPEN_CLIENT_DEFAULT","page":"Constants","title":"ModelSelectionGUI.OPEN_CLIENT_DEFAULT","text":"OPEN_CLIENT_DEFAULT\n\nWhether to open a window with the client automatically when the server starts. The default value is false.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DATA","page":"Constants","title":"ModelSelectionGUI.DATA","text":"DATA\n\nSymbol key representing data. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FILEHASH","page":"Constants","title":"ModelSelectionGUI.FILEHASH","text":"FILEHASH\n\nSymbol representing filehash. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FILENAME","page":"Constants","title":"ModelSelectionGUI.FILENAME","text":"FILENAME\n\nSymbol representing filename. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ID","page":"Constants","title":"ModelSelectionGUI.ID","text":"ID\n\nSymbol representing ID. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MESSAGE","page":"Constants","title":"ModelSelectionGUI.MESSAGE","text":"MESSAGE\n\nSymbol representing message. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NAME","page":"Constants","title":"ModelSelectionGUI.NAME","text":"NAME\n\nSymbol representing a name. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PARAMETERS","page":"Constants","title":"ModelSelectionGUI.PARAMETERS","text":"PARAMETERS\n\nSymbol representing parameters. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TEMP_FILENAME","page":"Constants","title":"ModelSelectionGUI.TEMP_FILENAME","text":"TEMP_FILENAME\n\nSymbol representing temporary filename. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NCORES","page":"Constants","title":"ModelSelectionGUI.NCORES","text":"NCORES\n\nSymbol representing the number of cores. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NWORKERS","page":"Constants","title":"ModelSelectionGUI.NWORKERS","text":"NWORKERS\n\nSymbol representing the number of workers. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MODEL_SELECTION_VERSION","page":"Constants","title":"ModelSelectionGUI.MODEL_SELECTION_VERSION","text":"MODEL_SELECTION_VERSION\n\nSymbol representing the version of the Model Selection package. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.JULIA_VERSION","page":"Constants","title":"ModelSelectionGUI.JULIA_VERSION","text":"JULIA_VERSION\n\nSymbol representing the Julia version. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PENDING_QUEUE_SIZE","page":"Constants","title":"ModelSelectionGUI.PENDING_QUEUE_SIZE","text":"PENDING_QUEUE_SIZE\n\nSymbol representing the size of the jobs queue. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.STATUS","page":"Constants","title":"ModelSelectionGUI.STATUS","text":"STATUS\n\nSymbol representing the status of an operation. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ENQUEUED","page":"Constants","title":"ModelSelectionGUI.ENQUEUED","text":"ENQUEUED\n\nSymbol representing the enqueued status. Used to denote that a job has been added to the queue.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.RUNNING","page":"Constants","title":"ModelSelectionGUI.RUNNING","text":"RUNNING\n\nSymbol representing the running status. Used to denote that a job is currently being executed.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FINISHED","page":"Constants","title":"ModelSelectionGUI.FINISHED","text":"FINISHED\n\nSymbol representing the finished status. Used to denote that a job has completed execution.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FAILED","page":"Constants","title":"ModelSelectionGUI.FAILED","text":"FAILED\n\nSymbol representing the failed status. Used to denote that a job has failed to execute.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PENDING","page":"Constants","title":"ModelSelectionGUI.PENDING","text":"PENDING\n\nSymbol representing the pending status. Used to denote that a job is in the queue, but not yet being executed.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ESTIMATOR","page":"Constants","title":"ModelSelectionGUI.ESTIMATOR","text":"ESTIMATOR\n\nSymbol representing an estimator. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.EQUATION","page":"Constants","title":"ModelSelectionGUI.EQUATION","text":"EQUATION\n\nSymbol representing an equation. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DATANAMES","page":"Constants","title":"ModelSelectionGUI.DATANAMES","text":"DATANAMES\n\nSymbol representing data names. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.NOBS","page":"Constants","title":"ModelSelectionGUI.NOBS","text":"NOBS\n\nSymbol representing the number of observations. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_ENQUEUED","page":"Constants","title":"ModelSelectionGUI.TIME_ENQUEUED","text":"TIME_ENQUEUED\n\nSymbol representing the time that a job is enqueued. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_STARTED","page":"Constants","title":"ModelSelectionGUI.TIME_STARTED","text":"TIME_STARTED\n\nSymbol representing the time that a job started. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.TIME_FINISHED","page":"Constants","title":"ModelSelectionGUI.TIME_FINISHED","text":"TIME_FINISHED\n\nSymbol representing the time that a job finished. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.MSG","page":"Constants","title":"ModelSelectionGUI.MSG","text":"MSG\n\nSymbol representing an API message. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ERROR","page":"Constants","title":"ModelSelectionGUI.ERROR","text":"ERROR\n\nSymbol representing an error. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.ALLSUBSETREGRESSION","page":"Constants","title":"ModelSelectionGUI.ALLSUBSETREGRESSION","text":"ALLSUBSETREGRESSION\n\nSymbol representing the All Subset Regression result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.CROSSVALIDATION","page":"Constants","title":"ModelSelectionGUI.CROSSVALIDATION","text":"CROSSVALIDATION\n\nSymbol representing the Cross Validation result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SUMMARY","page":"Constants","title":"ModelSelectionGUI.SUMMARY","text":"SUMMARY\n\nSymbol representing the Summary result type. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.AVAILABLE_RESULTS_TYPES","page":"Constants","title":"ModelSelectionGUI.AVAILABLE_RESULTS_TYPES","text":"AVAILABLE_RESULTS_TYPES\n\nArray containing symbols that represent the different types of results available in the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.DEFAULT_WS_CHANNEL","page":"Constants","title":"ModelSelectionGUI.DEFAULT_WS_CHANNEL","text":"DEFAULT_WS_CHANNEL\n\nSymbol representing the default WebSockets channel. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.RESULTS","page":"Constants","title":"ModelSelectionGUI.RESULTS","text":"RESULTS\n\nSymbol representing results. Used as a key in various data structures throughout the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.CSV_MIME","page":"Constants","title":"ModelSelectionGUI.CSV_MIME","text":"CSV_MIME\n\nMIME type for CSV files.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.PLAIN_MIME","page":"Constants","title":"ModelSelectionGUI.PLAIN_MIME","text":"PLAIN_MIME\n\nMIME type for CSV files.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.SWAGGER_DOCUMENT_FILE","page":"Constants","title":"ModelSelectionGUI.SWAGGER_DOCUMENT_FILE","text":"SWAGGER_DOCUMENT_FILE\n\nThe file path of the Swagger document.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/constants/#ModelSelectionGUI.FRONTEND_INDEX","page":"Constants","title":"ModelSelectionGUI.FRONTEND_INDEX","text":"FRONTEND_INDEX\n\nThe file path of the frontend HTML file.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"This section of the documentation is dedicated to explaining the various utility functions used throughout the package. ","category":"page"},{"location":"library/internals/utils/#Index","page":"Utils","title":"Index","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"Pages = [\"utils.md\"]","category":"page"},{"location":"library/internals/utils/#Contents","page":"Utils","title":"Contents","text":"","category":"section"},{"location":"library/internals/utils/","page":"Utils","title":"Utils","text":"ModelSelectionGUI.get_pkg_version(name::AbstractString)\r\nModelSelectionGUI.save_tempfile(name::String, data::DataFrame)\r\nModelSelectionGUI.get_csv_filename(filename::String, result::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult)\r\nModelSelectionGUI.get_csv_filename(filename::String, result::ModelSelection.CrossValidation.CrossValidationResult)\r\nModelSelectionGUI.get_txt_filename(filename::String)\r\nModelSelectionGUI.get_csv_from_result(filename::String, result::ModelSelectionResult)\r\nModelSelectionGUI.get_parameters(raw_payload::Dict{String,Any})\r\nModelSelectionGUI.get_request_job_id(params::Any)\r\nModelSelectionGUI.get_request_filehash(params::Any)","category":"page"},{"location":"library/internals/utils/#ModelSelectionGUI.get_pkg_version-Tuple{AbstractString}","page":"Utils","title":"ModelSelectionGUI.get_pkg_version","text":"get_pkg_version(name::AbstractString)\n\nGet the installed version of a Julia package by its name.\n\nParameters\n\nname::AbstractString: The name of the Julia package.\n\nReturns\n\nString: The version of the specified package.\n\nExample\n\nget_pkg_version(\"ModelSelection\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.save_tempfile-Tuple{String, DataFrame}","page":"Utils","title":"ModelSelectionGUI.save_tempfile","text":"save_tempfile(name::String, data::DataFrame)\n\nSave a DataFrame to a temporary CSV file.\n\nParameters\n\nname::String: The name of the temporary file.\ndata::DataFrame: The DataFrame to save.\n\nReturns\n\nString: The filepath where the DataFrame was saved.\n\nExample\n\nsave_tempfile(\"temp.csv\", DataFrame(A = 1:3, B = 4:6))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_filename-Tuple{String, ModelSelection.AllSubsetRegression.AllSubsetRegressionResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_filename","text":"get_csv_filename(filename::String, result::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult)\n\nGet a filename for a CSV file that stores the results of an all subset regression.\n\nParameters\n\nfilename::String: The original filename.\nresult::ModelSelection.AllSubsetRegression.AllSubsetRegressionResult: The result of the all subset regression.\n\nReturns\n\nString: The filename for the CSV file.\n\nExample\n\nget_csv_filename(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_filename-Tuple{String, ModelSelection.CrossValidation.CrossValidationResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_filename","text":"get_csv_filename(filename::String, result::ModelSelection.CrossValidation.CrossValidationResult)\n\nGet a filename for a CSV file that stores the results of cross validation.\n\nParameters\n\nfilename::String: The original filename.\nresult::ModelSelection.CrossValidation.CrossValidationResult: The result of cross validation.\n\nReturns\n\nString: The filename for the CSV file.\n\nExample\n\nget_csv_filename(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_txt_filename-Tuple{String}","page":"Utils","title":"ModelSelectionGUI.get_txt_filename","text":"get_txt_filename(filename::String)\n\nGet a filename for a TXT file that stores summary data.\n\nParameters\n\nfilename::String: The original filename.\n\nReturns\n\nString: The filename for the TXT file.\n\nExample\n\nget_txt_filename(\"data.csv\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_csv_from_result-Tuple{String, ModelSelectionResult}","page":"Utils","title":"ModelSelectionGUI.get_csv_from_result","text":"get_csv_from_result(filename::String, result::ModelSelectionResult)\n\nGet CSV formatted data from a result of a model selection process.\n\nParameters\n\nfilename::String: The original filename.\nresult::ModelSelectionResult: The result of the model selection process.\n\nReturns\n\nDict{Symbol,Any}: A dictionary containing the filename and CSV data.\n\nExample\n\nget_csv_from_result(\"data.csv\", result)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_parameters-Tuple{Dict{String, Any}}","page":"Utils","title":"ModelSelectionGUI.get_parameters","text":"get_parameters(raw_payload::Dict{String,Any})\n\nConvert a dictionary with string keys to a dictionary with symbol keys.\n\nParameters\n\nraw_payload::Dict{String,Any}: A dictionary with string keys.\n\nReturns\n\nDict{Symbol,Any}: A dictionary with the same keys and values, but with the keys converted to symbols.\n\nExample\n\nget_parameters(Dict(\"a\" => 1, \"b\" => 2))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_request_job_id-Tuple{Any}","page":"Utils","title":"ModelSelectionGUI.get_request_job_id","text":"get_request_job_id(params::Any)\n\nGet the job id from a set of parameters.\n\nParameters\n\nparams::Any: The parameters to search.\n\nReturns\n\nString: The job id if it exists.\nNothing: If the id does not exist.\n\nExample\n\nget_request_job_id(params)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/utils/#ModelSelectionGUI.get_request_filehash-Tuple{Any}","page":"Utils","title":"ModelSelectionGUI.get_request_filehash","text":"get_request_filehash(params::Any)\n\nGet the file hash from a set of parameters.\n\nParameters\n\nparams::Any: The parameters to search.\n\nReturns\n\nString: The hash id if it exists.\nNothing: If the hsh does not exist.\n\nExample\n\nget_request_filehash(params)\n\n\n\n\n\n","category":"method"},{"location":"configuration/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/#Environment-variables","page":"Configuration","title":"Environment variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The package supports the following environment variables for configuration:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Name Default Description\nSERVER_PORT 8000 The port number on which the web server will listen\nCLIENT_PORT SERVER_PORT + 1 The port number on which the client will listen\nOPEN_DOCUMENTATION false Open a window with the documentation after starting the server\nOPEN_CLIENT false Open a window with the client after starting the server\nSERVER_HOST 127.0.0.1 Defines the base URL of the server","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nYou can choose to set these environment variables based on your specific requirements. If not set, the package will use the default values mentioned above.","category":"page"},{"location":"configuration/#Setting-variables","page":"Configuration","title":"Setting variables","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To set environment variables, you can create a .env file in the root directory of your project. ","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"tip: Tip\nYou can copy the .env.template file as a starting point. Then, modify the values in the .env file according to your desired configuration.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"To set an environment variable, you sould use the following syntax:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"# .env file\r\nexport VARIABLE_NAME=value","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"For example, to set the SERVER_PORT environment variable to 9000, you can use:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"export SERVER_PORT=9000","category":"page"},{"location":"configuration/#Load-custom-dotenv-file","page":"Configuration","title":"Load custom dotenv file","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The dotenv file will .env as default. If a custom file is needed, you can use the command in the Julia REPL:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"start(dotenv=\".mycustomenv\")\r\n\r\n# or\r\n\r\nload_envvars(\".mycustomenv\")\r\nstart()","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nPlease note that modifying environment variables may require restarting the web server for the changes to take effect.","category":"page"},{"location":"todo/#TODO","page":"Todo","title":"TODO","text":"","category":"section"},{"location":"todo/","page":"Todo","title":"Todo","text":"This section is an overview of pending tasks, improvements, and future plans for the ModelSelectionGUI package.","category":"page"},{"location":"todo/","page":"Todo","title":"Todo","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"TODO.md\"))","category":"page"},{"location":"license/#Licence","page":"License","title":"Licence","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"using Markdown, ModelSelectionGUI\r\nMarkdown.parse_file(joinpath(pkgdir(ModelSelectionGUI), \"LICENSE\"))","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"There are multiple ways to use the package, depending on your specific requirements and environment. This section outlines the various options available.","category":"page"},{"location":"usage/#Index","page":"Usage","title":"Index","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Pages = [\"usage.md\"]","category":"page"},{"location":"usage/#Using-Julia-REPL","page":"Usage","title":"Using Julia REPL","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"This is the simplest way to run the package, however it is the one that requires the most interaction.","category":"page"},{"location":"usage/#Prerequisites","page":"Usage","title":"Prerequisites","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Before getting started, make sure you have the following prerequisites installed on your machine:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia >= 1.6.1","category":"page"},{"location":"usage/#Run-the-service","page":"Usage","title":"Run the service","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"using ModelSelectionGUI\nload_envvars(\".env\") # optional\nstart()","category":"page"},{"location":"usage/#Using-bin/server-command","page":"Usage","title":"Using bin/server command","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Using the bin/server command is a convenient way to run the package as a server directly from your command line interface. However, it is necessary to download the source code of the package from the repository.","category":"page"},{"location":"usage/#Prerequisites-2","page":"Usage","title":"Prerequisites","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Before getting started, make sure you have the following prerequisites installed on your machine:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia >= 1.6.1\ngit: Optional for Option 3.","category":"page"},{"location":"usage/#Download-the-source-code","page":"Usage","title":"Download the source code","text":"","category":"section"},{"location":"usage/#Option-1:-Microsoft-Windows","page":"Usage","title":"Option 1: Microsoft Windows","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ Invoke-WebRequest -Uri \"https://github.com/ParallelGSReg/ModelSelectionGUI.jl/archive/refs/heads/main.zip\" -OutFile \"ModelSelectionGUI.jl-main.zip\"\n$ Compress-Archive -LiteralPath 'ModelSelectionGUI.jl-main.zip' -DestinationPath 'ModelSelectionGUI.jl-main'\n$ cd ModelSelection.jl-main","category":"page"},{"location":"usage/#Option-2:-GNU/Linux","page":"Usage","title":"Option 2: GNU/Linux","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ wget --no-check-certificate --content-disposition https://github.com/ParallelGSReg/ModelSelectionGUI.jl/archive/refs/heads/main.zip\n$ unzip ModelSelectionGUI.jl-main.zip\n$ cd ModelSelection.jl-main","category":"page"},{"location":"usage/#Option-3:-Using-Git","page":"Usage","title":"Option 3: Using Git","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ git clone https://github.com/ParallelGSReg/ModelSelectionGUI.jl.git\n$ cd ModelSelection.jl ","category":"page"},{"location":"usage/#Run-the-service-2","page":"Usage","title":"Run the service","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Once you have the source files, you can use the command to start the application.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Open a terminal or command prompt.\nNavigate to the directory where the source code is located.\nRun the following command to start the application:","category":"page"},{"location":"usage/#Option-1:-Microsoft-Windows-2","page":"Usage","title":"Option 1: Microsoft Windows","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ bin/server.bat","category":"page"},{"location":"usage/#Option-2:-GNU/Linux-2","page":"Usage","title":"Option 2: GNU/Linux","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ bin/server","category":"page"},{"location":"usage/#Option-3:-macOS","page":"Usage","title":"Option 3: macOS","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ bin/server","category":"page"},{"location":"usage/#Using-Docker","page":"Usage","title":"Using Docker","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Docker allows you to use the package in a container, ensuring consistency and portability across different environments without the need to install Julia or any dependencies on your local machine.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"warning: Warning\nIn this method, the open_client and open_documentation options for opening windows at startup are disabled. So you must enter those pages through the browser.","category":"page"},{"location":"usage/#Prerequisites-3","page":"Usage","title":"Prerequisites","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Before getting started, make sure you have the following prerequisites installed on your machine:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Docker: Ensure Docker is installed and running.","category":"page"},{"location":"usage/#Run-the-service-3","page":"Usage","title":"Run the service","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"docker run -d -p <host-port>:8000 --name <container-name> ghcr.io/parallelgsreg/modelselectiongui.jl:latest","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"note: Note\nReplace <host-port> with the port on your host machine where you want to access the application, <container-name> with a name for your container (e.g., model-selection-gui-container).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Once the container is running, you should be able to access your backend application by visiting http://localhost:<host-port> in your web browser.","category":"page"},{"location":"usage/#Using-Docker-Compose","page":"Usage","title":"Using Docker Compose","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Docker Compose is a tool for running multi-container Docker applications. With Docker Compose, you can simplify the execution of the application without the need to install Julia or any dependencies on your local machine with only one simple command.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"warning: Warning\nIn this method, the open_client and open_documentation options for opening windows at startup are disabled. So you must enter those pages through the browser.","category":"page"},{"location":"usage/#Prerequisites-4","page":"Usage","title":"Prerequisites","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Before getting started, make sure you have the following prerequisites installed on your machine:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Docker: Ensure Docker is installed and running.\nDocker Compose: Install Docker Compose according to your operating system.","category":"page"},{"location":"usage/#Setup","page":"Usage","title":"Setup","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Download the docker-compose.yaml file from the package repository: compose.yaml\nOr create the file using the following structure:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"version: '3'\n\nservices:\n    modelselectiongui:\n        image: ghcr.io/parallelgsreg/modelselectiongui.jl:latest\n        ports:\n            - 8000:8000","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"note: Note\nReplace <host-port> with the port on your host machine where you want to access the application.version: '3'\n    ...\n        ports:\n            - <host-port>:8000","category":"page"},{"location":"usage/#.-Run-the-application","page":"Usage","title":"2. Run the application","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Once you have the Docker Compose file, you can use the docker-compose up command to start the application.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Open a terminal or command prompt.\nNavigate to the directory where the compose.yml file is located.\nRun the following command to start the application:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"docker-compose up","category":"page"},{"location":"library/internals/windows/#Windows","page":"Windows","title":"Windows","text":"","category":"section"},{"location":"library/internals/windows/","page":"Windows","title":"Windows","text":"The section of the package is responsible for controlling how and when a window is opened.","category":"page"},{"location":"library/internals/windows/#Index","page":"Windows","title":"Index","text":"","category":"section"},{"location":"library/internals/windows/","page":"Windows","title":"Windows","text":"Pages = [\"windows.md\"]","category":"page"},{"location":"library/internals/windows/#Contents","page":"Windows","title":"Contents","text":"","category":"section"},{"location":"library/internals/windows/","page":"Windows","title":"Windows","text":"ModelSelectionGUI.create_application()\r\nModelSelectionGUI.open_window(; path::Union{String,Nothing} = nothing)\r\nModelSelectionGUI.open_window(url::String)\r\nModelSelectionGUI.close_windows()\r\nModelSelectionGUI.get_url_from_path(path::Union{String,Nothing} = nothing)","category":"page"},{"location":"library/internals/windows/#ModelSelectionGUI.create_application-Tuple{}","page":"Windows","title":"ModelSelectionGUI.create_application","text":"create_application()\n\nCreate a new Electron application.\n\nThis function creates a new Electron application by closing any existing Electron application and initializing a new Application object.\n\nExample\n\ncreate_application()\n\n\n\n\n\n","category":"method"},{"location":"library/internals/windows/#ModelSelectionGUI.open_window-Tuple{}","page":"Windows","title":"ModelSelectionGUI.open_window","text":"open_window(; path::Union{String, Nothing} = nothing)\n\nOpen a window with the specified path of the server. The server host and port are taken from the SERVER_HOST and SERVER_PORT global variable.\n\npath: Optional string specifying the path on the server to open in the window. If nothing, the root path of the server is opened.\n\nExample\n\nopen_window(path = \"/docs\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/windows/#ModelSelectionGUI.open_window-Tuple{String}","page":"Windows","title":"ModelSelectionGUI.open_window","text":"open_window(url::String)\n\nOpen a window with the specified url.\n\nurl: String specifying the url to open in the window. If nothing.\n\nExample\n\nopen_window(\"http://localhost:8000\")\n\n\n\n\n\n","category":"method"},{"location":"library/internals/windows/#ModelSelectionGUI.close_windows-Tuple{}","page":"Windows","title":"ModelSelectionGUI.close_windows","text":"close_windows()\n\nOpen a window with the specified url.\n\nurl: String specifying the url to open in the window. If nothing.\n\nExample\n\nclose_windows(path = \"/docs\", port = 8080)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/windows/#ModelSelectionGUI.get_url_from_path","page":"Windows","title":"ModelSelectionGUI.get_url_from_path","text":"get_url_from_path(path::Union{String,Nothing} = nothing)\n\nGenerates a URL string based on the provided path and global settings SERVER_HOST,  SERVER_PORT, and SSL_ENABLED.\n\nParameters\n\npath::Union{String,Nothing}: an optional argument which denotes the specific path to be appended  to the base URL. If not provided, the function generates a base URL only.\n\nReturns\n\nString: The URL as a string.\n\nExample\n\nurl = get_url_from_path(\"/api/data\")\n\n\n\n\n\n","category":"function"},{"location":"#ModelSelectionGUI","page":"Home","title":"ModelSelectionGUI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The ModelSelectionGUI is a web server package designed to provide a user-friendly interface for utilizing the ModelSelection package. It consists of a backend and an optional frontend that offers a graphical user interface (GUI) for seamless interaction with the underlying ModelSelection functionality.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Web server backend: The package includes a web server backend that handles requests and responses between the user and the ModelSelection.jl package.\nGood documentation: The package provides a comprehensive API documentation powered by Swagger.\nGraphical User Interface (GUI): The optional frontend provides a GUI that allows users to interact with the ModelSelection package using a visual interface, making it easier to explore and utilize the various functionalities.\nEasy Integration: The ModelSelectionGUI is designed to seamlessly integrate with the ModelSelection package, providing a user-friendly interface to access and utilize its capabilities without requiring in-depth knowledge of the underlying Julia code.\nDockerized solution for effortless usage. The package can run the need to install Julia or any dependencies. This makes it incredibly easy to get started and ensures a hassle-free experience for users. Simply use the Dockerized solution and enjoy seamless execution without worrying about any installation or dependency management.","category":"page"},{"location":"#ModelSelection-package","page":"Home","title":"ModelSelection package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ModelSelectionGUI package functions as an interface with ModelSelection.jl. For more details about the functionalities and features provided by ModelSelection.jl, please visit the package repository.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! If you encounter any issues or have suggestions for improvements, please open an issue or submit a pull request on the repository. Make sure to follow the guidelines outlined in the Contributing section.","category":"page"},{"location":"#TODO-List","page":"Home","title":"TODO List","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For an overview of pending tasks, improvements, and future plans for the ModelSelectionGUI package, please refer to the TODO section.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is licensed under the MIT License.","category":"page"},{"location":"library/public/#Development","page":"Public","title":"Development","text":"","category":"section"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for Documenter.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"library/public/#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"set_envvars(;\r\n    server_host::Union{String,Nothing} = nothing,\r\n    server_port::Union{Int64,Nothing} = nothing,\r\n    ssl_enabled::Union{Bool,Nothing} = nothing,\r\n    open_documentation::Union{Bool,Nothing} = nothing,\r\n    open_client::Union{Bool,Nothing} = nothing,\r\n)\r\nload_envvars(path::String = ENV_FILE_DEFAULT)\r\nreset_envvars()\r\nstart(; server_port::Union{Int, Nothing} = nothing, client_port::Union{Int, Nothing} = nothing, OPEN_DOCUMENTATION::Union{Bool, Nothing} = nothing, open_client::Union{Bool, Nothing} = nothing, dotenv::String = ENV_FILE_DEFAULT, no_task::Bool = false)\r\nstop()\r\nModelSelectionGUI.to_dict(job::ModelSelectionJob)","category":"page"},{"location":"library/public/#ModelSelectionGUI.set_envvars-Tuple{}","page":"Public","title":"ModelSelectionGUI.set_envvars","text":"set_envvars(;\n    server_host::Union{String,Nothing} = nothing,\n    server_port::Union{Int64,Nothing} = nothing,\n    ssl_enabled::Union{Bool,Nothing} = nothing,\n    open_documentation::Union{Bool,Nothing} = nothing,\n    open_client::Union{Bool,Nothing} = nothing,\n)\n\nSet environment variables. If a certain environment variable is not defined in the file, the corresponding global variable will be updated.\n\nParameters\n\nserver_host::Union{String, Nothing}: The server host address.\nserver_port::Union{Int64, Nothing}: The server port number.\nssl_enabled::Union{Bool, Nothing}: Indicates whether SSL encryption is enabled.\nopen_client::Union{Bool, Nothing}: Indicates whether to open the client automatically.\nopen_documentation::Union{Bool, Nothing}: Indicates whether to open the documentation automatically.\n\nGlobals\n\nSERVER_HOST::String: The server host address.\nSERVER_PORT::Int64: The server port number.\nSSL_ENABLED::Bool: Indicates whether SSL encryption is enabled.\nOPEN_DOCUMENTATION::Bool: Indicates whether to open the documentation automatically.\nOPEN_CLIENT::Bool: Indicates whether to open the client automatically.\n\nExample\n\nset_envvars(\n    server_host = \"localhost\",\n    server_port = 8000,\n    ssl_enabled = false,\n    open_client = true,\n    open_documentation = true,\n)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.load_envvars","page":"Public","title":"ModelSelectionGUI.load_envvars","text":"load_envvars(path::String = ENV_FILE_DEFAULT)\n\nLoad environment variables from a .env file specified by path. If a certain environment variable is not defined in the file, the default value will be used.\n\nParameters\n\npath:String: Path to the .env file. If not provided, the default path (as defined in ENV_FILE_DEFAULT) is used.\n\nExample\n\nload_envvars(\"./path/to/.env\")\n\n\n\n\n\n","category":"function"},{"location":"library/public/#ModelSelectionGUI.reset_envvars-Tuple{}","page":"Public","title":"ModelSelectionGUI.reset_envvars","text":"reset_envvars()\n\nReset environment variables to the default values.\n\nGlobals\n\nSERVER_HOST::String: The server host address.\nSERVER_PORT::Int64: The server port number.\nSSL_ENABLED::Bool: Indicates whether SSL encryption is enabled.\nOPEN_DOCUMENTATION::Bool: Indicates whether to open the documentation automatically.\nOPEN_CLIENT::Bool: Indicates whether to open the client automatically.\n\nExample\n\nreset_envvars()\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.start-Tuple{}","page":"Public","title":"ModelSelectionGUI.start","text":"start(; server_host::Union{String,Nothing} = nothing, server_port::Union{Int, Nothing} = nothing, client_port::Union{Int, Nothing} = nothing, OPEN_DOCUMENTATION::Union{Bool, Nothing} = nothing, open_client::Union{Bool, Nothing} = nothing, dotenv::String = ENV_FILE_DEFAULT, no_task::Bool = false)\n\nInitiate the server with optional parameters. Default values are loaded from environment variables if the parameters are not provided. This function also sets up several routes, a WebSocket channel, and initiates a background task.\n\nParameters\n\nserver_host::String: The server host address.\nserver_port::Int64: Port number for the server.\nssl_enabled::Bool: Indicates whether SSL encryption is enabled.\nopen_client::Bool: Indicates whether to open a client window automatically.\nopen_documentation::Bool: Indicates whether to open a documentation window automatically.\ndotenv::String: Specifies the path to the file containing environment variables. Default value is .env.\nno_task::Bool: If true, does not initiate a background task. Dafault value is false.\n\nExample\n\nstart(server_port = 8080, OPEN_DOCUMENTATION = true)\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.stop-Tuple{}","page":"Public","title":"ModelSelectionGUI.stop","text":"stop()\n\nShut down the server, close all windows and stop backgound tasks.\n\nExample\n\nstop()\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ModelSelectionGUI.to_dict-Tuple{ModelSelectionJob}","page":"Public","title":"ModelSelectionGUI.to_dict","text":"to_dict(job::ModelSelectionJob)\n\nConvert a ModelSelectionJob object to a dictionary.\n\nParameters\n\njob::ModelSelectionJob: The job to convert.\n\nReturns\n\nDict{Symbol,Any}: A dictionary representation of the job.\n\nExample\n\nto_dict(job)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"This section of the documentation is dedicated to explaining the internal global variables used in this package. ","category":"page"},{"location":"library/internals/variables/#Index","page":"Variables","title":"Index","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"Pages = [\"variables.md\"]","category":"page"},{"location":"library/internals/variables/#Contents","page":"Variables","title":"Contents","text":"","category":"section"},{"location":"library/internals/variables/","page":"Variables","title":"Variables","text":"ModelSelectionGUI.SERVER_HOST\r\nModelSelectionGUI.SERVER_PORT\r\nModelSelectionGUI.SSL_ENABLED\r\nModelSelectionGUI.OPEN_DOCUMENTATION\r\nModelSelectionGUI.OPEN_CLIENT\r\nModelSelectionGUI.ELECTRON_APPLICATION\r\nModelSelectionGUI.JOB_TASK","category":"page"},{"location":"library/internals/variables/#ModelSelectionGUI.SERVER_HOST","page":"Variables","title":"ModelSelectionGUI.SERVER_HOST","text":"SERVER_HOST\n\nDefines the base URL of the server. By default, it uses the value of SERVER_HOST_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.SERVER_PORT","page":"Variables","title":"ModelSelectionGUI.SERVER_PORT","text":"SERVER_PORT\n\nThe port number on which the web server will listen. By default, it uses the value of SERVER_PORT_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.SSL_ENABLED","page":"Variables","title":"ModelSelectionGUI.SSL_ENABLED","text":"SSL_ENABLED\n\nDetermines whether SSL (Secure Socket Layer) is enabled in the application.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.OPEN_DOCUMENTATION","page":"Variables","title":"ModelSelectionGUI.OPEN_DOCUMENTATION","text":"OPEN_DOCUMENTATION\n\nOpen a window after starting the server with the documentation. By default, it uses the value of OPEN_DOCUMENTATION_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.OPEN_CLIENT","page":"Variables","title":"ModelSelectionGUI.OPEN_CLIENT","text":"OPEN_CLIENT\n\nOpen a window after starting the server with the client. By default, it uses the value of OPEN_CLIENT_DEFAULT.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.ELECTRON_APPLICATION","page":"Variables","title":"ModelSelectionGUI.ELECTRON_APPLICATION","text":"ELECTRON_APPLICATION\n\nGlobal variable that holds an instance of an Electron application.  It is initialized to nothing, indicating that no instance of the application has been created yet.\n\n\n\n\n\n","category":"constant"},{"location":"library/internals/variables/#ModelSelectionGUI.JOB_TASK","page":"Variables","title":"ModelSelectionGUI.JOB_TASK","text":"JOB_TASK\n\nGlobal variable that holds the task that runs asynchronously being executed.\n\n\n\n\n\n","category":"constant"}]
}
